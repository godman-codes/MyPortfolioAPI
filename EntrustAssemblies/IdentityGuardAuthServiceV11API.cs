//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 
namespace IdentityGuardAuthServiceV11API {
    using System.Diagnostics;
    using System;
    using System.Xml;
    using System.Collections;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AuthenticationServiceBinding", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
	private bool useKeepAlive = false;

        /// <summary>
        /// Allow overriding of the socket keep alive behavior.
        /// The default is not to use keep alive, which is more
        /// reliable, but synchronizing socket keep alive times
        /// with the server and turning on keep alive may improve
        /// performance.
        /// </summary>
        public bool UseKeepAlive
        {
            get { return useKeepAlive; }
            set { useKeepAlive = value; }
        }

        /// <summary>
        /// Overrides the GetWebRequest method to allow setting of the
        /// socket keep alive behavior. See http://blogs.msdn.com/engelsr/articles/497902.aspx
        /// and http://seroter.wordpress.com/2007/08/06/troubleshooting-canceled-web-request/
        /// for details. The UseKeepAlive property can be used to control whether or
        /// not socket keep alive is used or not.
        /// </summary>
        protected override System.Net.WebRequest GetWebRequest(Uri uri)
        {
            System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)base.GetWebRequest(uri);

            if (this.UseKeepAlive)
            {
                webRequest.KeepAlive = true;
            }
            else
            {
                webRequest.KeepAlive = false;
            }
            return webRequest;
        }

       /// <summary>
       ///   Convert a SoapException to an AuthenticationFault.
       ///   Return null if the conversion fails.
       /// </summary>
       /// <param name="soapEx">
       ///   the SoapException returned by IG server
       /// </param>
       /// <returns type="AuthenticationFault">
       ///   the AuthenticationFault
       /// </returns>
       public static AuthenticationFault getFault(SoapException soapEx)
       {
          XmlDocument doc = new XmlDocument();
          if (soapEx.Detail == null)
          {
             return null;
          }
          doc.LoadXml(soapEx.Detail.OuterXml);
          if (!doc.FirstChild.HasChildNodes)
          {
             return null;
          }
          XmlNode node = doc.FirstChild.FirstChild;
          string name = node.Name;
          AuthenticationFault fault = null;
          if (name.Contains("AuthenticationFault"))
          {
             fault = new AuthenticationFault();
          }
          else if (name.Contains("AuthenticationServiceFault"))
          {
             fault = new AuthenticationServiceFault();
          }
          else if (name.Contains("AuthenticationSystemFault"))
          {
             fault = new AuthenticationSystemFault();
          }
          else if (name.Contains("AuthenticationPasswordChangeRequiredFault"))
          {
             fault = new AuthenticationPasswordChangeRequiredFault();
          }

          if (fault != null)
          {
             if (fault is AuthenticationPasswordChangeRequiredFault)
             {
                AuthenticationPasswordChangeRequiredFault pswdFault =
                    (AuthenticationPasswordChangeRequiredFault)fault;
                pswdFault.PasswordRules = getPasswordRulesFromFault(node);

                pswdFault.errorMessage = getValueFromFault(node, "errorMessage");
                pswdFault.id = getValueFromFault(node, "id");
                pswdFault.InternalCode = getValueFromFault(node, "InternalCode");
                pswdFault.ErrorCode = getErrorCodeFromFault(node);
                pswdFault.Params = getListFromFault(node, "Params");

                return pswdFault;
             }
             else
             {
                fault.errorMessage = getValueFromFault(node, "errorMessage");
                fault.id = getValueFromFault(node, "id");
                fault.InternalCode = getValueFromFault(node, "InternalCode");
                fault.ErrorCode = getErrorCodeFromFault(node);
                fault.Params = getListFromFault(node, "Params");

                return fault;
             }
          }
          return null;
       }


       private static XmlNode getNodeForTag(XmlNode node, string tag)
       {
          string xpath = "*[local-name()='" + tag +"']";
          return node.SelectSingleNode(xpath);
       }

       private static string getValueFromFault(XmlNode node, string tag)
       {
          XmlNode n = getNodeForTag(node, tag);
          if (n != null)
          {
             return n.InnerText;
          }
          else
          {
             return null;
          }
       }

       private static PasswordRules getPasswordRulesFromFault(XmlNode node)
       {
          XmlNode pwdRules = getNodeForTag(node, "PasswordRules");

          if (pwdRules == null)
          {
             return null;
          }
          // construct PasswordRules
          PasswordRules rules = new PasswordRules();
          XmlDocument rulesDoc = new XmlDocument();
          rulesDoc.LoadXml(pwdRules.OuterXml);
          if (!rulesDoc.HasChildNodes)
          {
             return null;
          }

          XmlNode rulesNode = rulesDoc.FirstChild;
          rules.minimumLength =
             Int32.Parse(getValueFromFault(rulesNode, "minimumLength"));
          rules.maxRepeatedChars =
             Int32.Parse(getValueFromFault(rulesNode, "maxRepeatedChars"));
          string number = getValueFromFault(rulesNode, "number");
          if (number != null)
          {
             rules.number =
                (PasswordCharacterType) Enum.Parse(typeof(PasswordCharacterType), number);
          }
          string upperCase = getValueFromFault(rulesNode, "upperCase");
          if (upperCase != null)
          {
             rules.upperCase =
                (PasswordCharacterType) Enum.Parse(typeof(PasswordCharacterType), upperCase);
          }
          string lowerCase = getValueFromFault(rulesNode, "lowerCase");
          if (lowerCase != null)
          {
             rules.lowerCase =
                (PasswordCharacterType) Enum.Parse(typeof(PasswordCharacterType), lowerCase);
          }
          string specialChar = getValueFromFault(rulesNode, "specialChar");
          if (specialChar != null)
          {
             rules.specialChar =
                (PasswordCharacterType) Enum.Parse(typeof(PasswordCharacterType), specialChar);
          }
          return rules;

       }

       private static ErrorCode getErrorCodeFromFault(XmlNode node)
       {
          string errorCode = getValueFromFault(node, "ErrorCode");
          if (errorCode == null)
          {
             return ErrorCode.SYSTEM_ERROR;
          }

          return (ErrorCode) Enum.Parse(typeof(ErrorCode), errorCode);
       }

       private static string[] getListFromFault(XmlNode node, string tag)
       {
          XmlNode n = getNodeForTag(node, tag);
          if ((n == null) || (! n.HasChildNodes)) return null;

          ArrayList list = new ArrayList();
          for (int i=0; i<n.ChildNodes.Count; i++)
          {
              XmlNode child = n.ChildNodes[i];
              if (child.LocalName.Equals("item"))
              {
                 list.Add(child.InnerText);
              }
          }

          return (string []) list.ToArray(typeof(string));
       }


        
        private System.Threading.SendOrPostCallback pingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAnonymousChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAnonymousChallengeForGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateAnonymousChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAnonymousCertChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateAnonymousCertChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllowedAuthenticationTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllowedAuthenticationTypesForGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGenericChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGenericChallengeExOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateGenericChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateGenericChallengeExOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCombinedChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateCombinedChallengeOperationCompleted;
        
    /// <summary>
    ///   Default constructor
    /// </summary>
        public AuthenticationService() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = "http://localhost:8080/IdentityGuardAuthService/services/AuthenticationServiceV11";
        }
        
    ///  <remarks/>
        public event pingCompletedEventHandler pingCompleted;
        
    ///  <remarks/>
        public event getAnonymousChallengeCompletedEventHandler getAnonymousChallengeCompleted;
        
    ///  <remarks/>
        public event getAnonymousChallengeForGroupCompletedEventHandler getAnonymousChallengeForGroupCompleted;
        
    ///  <remarks/>
        public event authenticateAnonymousChallengeCompletedEventHandler authenticateAnonymousChallengeCompleted;
        
    ///  <remarks/>
        public event getAnonymousCertChallengeCompletedEventHandler getAnonymousCertChallengeCompleted;
        
    ///  <remarks/>
        public event authenticateAnonymousCertChallengeCompletedEventHandler authenticateAnonymousCertChallengeCompleted;
        
    ///  <remarks/>
        public event getAllowedAuthenticationTypesCompletedEventHandler getAllowedAuthenticationTypesCompleted;
        
    ///  <remarks/>
        public event getAllowedAuthenticationTypesForGroupCompletedEventHandler getAllowedAuthenticationTypesForGroupCompleted;
        
    ///  <remarks/>
        public event getGenericChallengeCompletedEventHandler getGenericChallengeCompleted;
        
    ///  <remarks/>
        public event getGenericChallengeExCompletedEventHandler getGenericChallengeExCompleted;
        
    ///  <remarks/>
        public event authenticateGenericChallengeCompletedEventHandler authenticateGenericChallengeCompleted;
        
    ///  <remarks/>
        public event authenticateGenericChallengeExCompletedEventHandler authenticateGenericChallengeExCompleted;
        
    ///  <remarks/>
        public event getCombinedChallengeCompletedEventHandler getCombinedChallengeCompleted;
        
    ///  <remarks/>
        public event authenticateCombinedChallengeCompletedEventHandler authenticateCombinedChallengeCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void ping([System.Xml.Serialization.XmlArrayAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] NameValue[] pingCallParms) {
            this.Invoke("ping", new object[] {
                        pingCallParms});
        }
        
    ///  <remarks/>
        public System.IAsyncResult Beginping(NameValue[] pingCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ping", new object[] {
                        pingCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public void Endping(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
    ///  <remarks/>
        public void pingAsync(NameValue[] pingCallParms) {
            this.pingAsync(pingCallParms, null);
        }
        
    ///  <remarks/>
        public void pingAsync(NameValue[] pingCallParms, object userState) {
            if ((this.pingOperationCompleted == null)) {
                this.pingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpingOperationCompleted);
            }
            this.InvokeAsync("ping", new object[] {
                        pingCallParms}, this.pingOperationCompleted, userState);
        }
        
        private void OnpingOperationCompleted(object arg) {
            if ((this.pingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAnonymousChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericChallenge getAnonymousChallenge() {
            object[] results = this.Invoke("getAnonymousChallenge", new object[0]);
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetAnonymousChallenge(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAnonymousChallenge", new object[0], callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericChallenge EndgetAnonymousChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public void getAnonymousChallengeAsync() {
            this.getAnonymousChallengeAsync(null);
        }
        
    ///  <remarks/>
        public void getAnonymousChallengeAsync(object userState) {
            if ((this.getAnonymousChallengeOperationCompleted == null)) {
                this.getAnonymousChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAnonymousChallengeOperationCompleted);
            }
            this.InvokeAsync("getAnonymousChallenge", new object[0], this.getAnonymousChallengeOperationCompleted, userState);
        }
        
        private void OngetAnonymousChallengeOperationCompleted(object arg) {
            if ((this.getAnonymousChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAnonymousChallengeCompleted(this, new getAnonymousChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAnonymousChallengeForGroupReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericChallenge getAnonymousChallengeForGroup([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetAnonymousChallengeForGroupCallParms getAnonymousChallengeForGroupCallParms) {
            object[] results = this.Invoke("getAnonymousChallengeForGroup", new object[] {
                        getAnonymousChallengeForGroupCallParms});
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetAnonymousChallengeForGroup(GetAnonymousChallengeForGroupCallParms getAnonymousChallengeForGroupCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAnonymousChallengeForGroup", new object[] {
                        getAnonymousChallengeForGroupCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericChallenge EndgetAnonymousChallengeForGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public void getAnonymousChallengeForGroupAsync(GetAnonymousChallengeForGroupCallParms getAnonymousChallengeForGroupCallParms) {
            this.getAnonymousChallengeForGroupAsync(getAnonymousChallengeForGroupCallParms, null);
        }
        
    ///  <remarks/>
        public void getAnonymousChallengeForGroupAsync(GetAnonymousChallengeForGroupCallParms getAnonymousChallengeForGroupCallParms, object userState) {
            if ((this.getAnonymousChallengeForGroupOperationCompleted == null)) {
                this.getAnonymousChallengeForGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAnonymousChallengeForGroupOperationCompleted);
            }
            this.InvokeAsync("getAnonymousChallengeForGroup", new object[] {
                        getAnonymousChallengeForGroupCallParms}, this.getAnonymousChallengeForGroupOperationCompleted, userState);
        }
        
        private void OngetAnonymousChallengeForGroupOperationCompleted(object arg) {
            if ((this.getAnonymousChallengeForGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAnonymousChallengeForGroupCompleted(this, new getAnonymousChallengeForGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticateAnonymousChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericAuthenticateResponse authenticateAnonymousChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] AuthenticateAnonymousChallengeCallParms authenticateAnonymousChallengeCallParms) {
            object[] results = this.Invoke("authenticateAnonymousChallenge", new object[] {
                        authenticateAnonymousChallengeCallParms});
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BeginauthenticateAnonymousChallenge(AuthenticateAnonymousChallengeCallParms authenticateAnonymousChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("authenticateAnonymousChallenge", new object[] {
                        authenticateAnonymousChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse EndauthenticateAnonymousChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public void authenticateAnonymousChallengeAsync(AuthenticateAnonymousChallengeCallParms authenticateAnonymousChallengeCallParms) {
            this.authenticateAnonymousChallengeAsync(authenticateAnonymousChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void authenticateAnonymousChallengeAsync(AuthenticateAnonymousChallengeCallParms authenticateAnonymousChallengeCallParms, object userState) {
            if ((this.authenticateAnonymousChallengeOperationCompleted == null)) {
                this.authenticateAnonymousChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateAnonymousChallengeOperationCompleted);
            }
            this.InvokeAsync("authenticateAnonymousChallenge", new object[] {
                        authenticateAnonymousChallengeCallParms}, this.authenticateAnonymousChallengeOperationCompleted, userState);
        }
        
        private void OnauthenticateAnonymousChallengeOperationCompleted(object arg) {
            if ((this.authenticateAnonymousChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateAnonymousChallengeCompleted(this, new authenticateAnonymousChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAnonymousCertChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericChallenge getAnonymousCertChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetAnonymousCertChallengeCallParms getAnonymousCertChallengeCallParms) {
            object[] results = this.Invoke("getAnonymousCertChallenge", new object[] {
                        getAnonymousCertChallengeCallParms});
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetAnonymousCertChallenge(GetAnonymousCertChallengeCallParms getAnonymousCertChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAnonymousCertChallenge", new object[] {
                        getAnonymousCertChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericChallenge EndgetAnonymousCertChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public void getAnonymousCertChallengeAsync(GetAnonymousCertChallengeCallParms getAnonymousCertChallengeCallParms) {
            this.getAnonymousCertChallengeAsync(getAnonymousCertChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void getAnonymousCertChallengeAsync(GetAnonymousCertChallengeCallParms getAnonymousCertChallengeCallParms, object userState) {
            if ((this.getAnonymousCertChallengeOperationCompleted == null)) {
                this.getAnonymousCertChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAnonymousCertChallengeOperationCompleted);
            }
            this.InvokeAsync("getAnonymousCertChallenge", new object[] {
                        getAnonymousCertChallengeCallParms}, this.getAnonymousCertChallengeOperationCompleted, userState);
        }
        
        private void OngetAnonymousCertChallengeOperationCompleted(object arg) {
            if ((this.getAnonymousCertChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAnonymousCertChallengeCompleted(this, new getAnonymousCertChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticateAnonymousCertChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericAuthenticateResponse authenticateAnonymousCertChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] AuthenticateAnonymousCertChallengeCallParms authenticateAnonymousCertChallengeCallParms) {
            object[] results = this.Invoke("authenticateAnonymousCertChallenge", new object[] {
                        authenticateAnonymousCertChallengeCallParms});
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BeginauthenticateAnonymousCertChallenge(AuthenticateAnonymousCertChallengeCallParms authenticateAnonymousCertChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("authenticateAnonymousCertChallenge", new object[] {
                        authenticateAnonymousCertChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse EndauthenticateAnonymousCertChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public void authenticateAnonymousCertChallengeAsync(AuthenticateAnonymousCertChallengeCallParms authenticateAnonymousCertChallengeCallParms) {
            this.authenticateAnonymousCertChallengeAsync(authenticateAnonymousCertChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void authenticateAnonymousCertChallengeAsync(AuthenticateAnonymousCertChallengeCallParms authenticateAnonymousCertChallengeCallParms, object userState) {
            if ((this.authenticateAnonymousCertChallengeOperationCompleted == null)) {
                this.authenticateAnonymousCertChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateAnonymousCertChallengeOperationCompleted);
            }
            this.InvokeAsync("authenticateAnonymousCertChallenge", new object[] {
                        authenticateAnonymousCertChallengeCallParms}, this.authenticateAnonymousCertChallengeOperationCompleted, userState);
        }
        
        private void OnauthenticateAnonymousCertChallengeOperationCompleted(object arg) {
            if ((this.authenticateAnonymousCertChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateAnonymousCertChallengeCompleted(this, new authenticateAnonymousCertChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAllowedAuthenticationTypesReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public AllowedAuthenticationTypes getAllowedAuthenticationTypes([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetAllowedAuthenticationTypesCallParms getAllowedAuthenticationTypesCallParms) {
            object[] results = this.Invoke("getAllowedAuthenticationTypes", new object[] {
                        getAllowedAuthenticationTypesCallParms});
            return ((AllowedAuthenticationTypes)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetAllowedAuthenticationTypes(GetAllowedAuthenticationTypesCallParms getAllowedAuthenticationTypesCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAllowedAuthenticationTypes", new object[] {
                        getAllowedAuthenticationTypesCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public AllowedAuthenticationTypes EndgetAllowedAuthenticationTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AllowedAuthenticationTypes)(results[0]));
        }
        
    ///  <remarks/>
        public void getAllowedAuthenticationTypesAsync(GetAllowedAuthenticationTypesCallParms getAllowedAuthenticationTypesCallParms) {
            this.getAllowedAuthenticationTypesAsync(getAllowedAuthenticationTypesCallParms, null);
        }
        
    ///  <remarks/>
        public void getAllowedAuthenticationTypesAsync(GetAllowedAuthenticationTypesCallParms getAllowedAuthenticationTypesCallParms, object userState) {
            if ((this.getAllowedAuthenticationTypesOperationCompleted == null)) {
                this.getAllowedAuthenticationTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllowedAuthenticationTypesOperationCompleted);
            }
            this.InvokeAsync("getAllowedAuthenticationTypes", new object[] {
                        getAllowedAuthenticationTypesCallParms}, this.getAllowedAuthenticationTypesOperationCompleted, userState);
        }
        
        private void OngetAllowedAuthenticationTypesOperationCompleted(object arg) {
            if ((this.getAllowedAuthenticationTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllowedAuthenticationTypesCompleted(this, new getAllowedAuthenticationTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAllowedAuthenticationTypesForGroupReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public AllowedAuthenticationTypes getAllowedAuthenticationTypesForGroup([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetAllowedAuthenticationTypesForGroupCallParms getAllowedAuthenticationTypesForGroupCallParms) {
            object[] results = this.Invoke("getAllowedAuthenticationTypesForGroup", new object[] {
                        getAllowedAuthenticationTypesForGroupCallParms});
            return ((AllowedAuthenticationTypes)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetAllowedAuthenticationTypesForGroup(GetAllowedAuthenticationTypesForGroupCallParms getAllowedAuthenticationTypesForGroupCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAllowedAuthenticationTypesForGroup", new object[] {
                        getAllowedAuthenticationTypesForGroupCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public AllowedAuthenticationTypes EndgetAllowedAuthenticationTypesForGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AllowedAuthenticationTypes)(results[0]));
        }
        
    ///  <remarks/>
        public void getAllowedAuthenticationTypesForGroupAsync(GetAllowedAuthenticationTypesForGroupCallParms getAllowedAuthenticationTypesForGroupCallParms) {
            this.getAllowedAuthenticationTypesForGroupAsync(getAllowedAuthenticationTypesForGroupCallParms, null);
        }
        
    ///  <remarks/>
        public void getAllowedAuthenticationTypesForGroupAsync(GetAllowedAuthenticationTypesForGroupCallParms getAllowedAuthenticationTypesForGroupCallParms, object userState) {
            if ((this.getAllowedAuthenticationTypesForGroupOperationCompleted == null)) {
                this.getAllowedAuthenticationTypesForGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllowedAuthenticationTypesForGroupOperationCompleted);
            }
            this.InvokeAsync("getAllowedAuthenticationTypesForGroup", new object[] {
                        getAllowedAuthenticationTypesForGroupCallParms}, this.getAllowedAuthenticationTypesForGroupOperationCompleted, userState);
        }
        
        private void OngetAllowedAuthenticationTypesForGroupOperationCompleted(object arg) {
            if ((this.getAllowedAuthenticationTypesForGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllowedAuthenticationTypesForGroupCompleted(this, new getAllowedAuthenticationTypesForGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getGenericChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericChallenge getGenericChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetGenericChallengeCallParms getGenericChallengeCallParms) {
            object[] results = this.Invoke("getGenericChallenge", new object[] {
                        getGenericChallengeCallParms});
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetGenericChallenge(GetGenericChallengeCallParms getGenericChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getGenericChallenge", new object[] {
                        getGenericChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericChallenge EndgetGenericChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public void getGenericChallengeAsync(GetGenericChallengeCallParms getGenericChallengeCallParms) {
            this.getGenericChallengeAsync(getGenericChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void getGenericChallengeAsync(GetGenericChallengeCallParms getGenericChallengeCallParms, object userState) {
            if ((this.getGenericChallengeOperationCompleted == null)) {
                this.getGenericChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGenericChallengeOperationCompleted);
            }
            this.InvokeAsync("getGenericChallenge", new object[] {
                        getGenericChallengeCallParms}, this.getGenericChallengeOperationCompleted, userState);
        }
        
        private void OngetGenericChallengeOperationCompleted(object arg) {
            if ((this.getGenericChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGenericChallengeCompleted(this, new getGenericChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getGenericChallengeExReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericChallengeEx getGenericChallengeEx([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetGenericChallengeCallParmsEx getGenericChallengeCallParmsEx) {
            object[] results = this.Invoke("getGenericChallengeEx", new object[] {
                        getGenericChallengeCallParmsEx});
            return ((GenericChallengeEx)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetGenericChallengeEx(GetGenericChallengeCallParmsEx getGenericChallengeCallParmsEx, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getGenericChallengeEx", new object[] {
                        getGenericChallengeCallParmsEx}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericChallengeEx EndgetGenericChallengeEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericChallengeEx)(results[0]));
        }
        
    ///  <remarks/>
        public void getGenericChallengeExAsync(GetGenericChallengeCallParmsEx getGenericChallengeCallParmsEx) {
            this.getGenericChallengeExAsync(getGenericChallengeCallParmsEx, null);
        }
        
    ///  <remarks/>
        public void getGenericChallengeExAsync(GetGenericChallengeCallParmsEx getGenericChallengeCallParmsEx, object userState) {
            if ((this.getGenericChallengeExOperationCompleted == null)) {
                this.getGenericChallengeExOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGenericChallengeExOperationCompleted);
            }
            this.InvokeAsync("getGenericChallengeEx", new object[] {
                        getGenericChallengeCallParmsEx}, this.getGenericChallengeExOperationCompleted, userState);
        }
        
        private void OngetGenericChallengeExOperationCompleted(object arg) {
            if ((this.getGenericChallengeExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGenericChallengeExCompleted(this, new getGenericChallengeExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticateGenericChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericAuthenticateResponse authenticateGenericChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] AuthenticateGenericChallengeCallParms authenticateGenericChallengeCallParms) {
            object[] results = this.Invoke("authenticateGenericChallenge", new object[] {
                        authenticateGenericChallengeCallParms});
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BeginauthenticateGenericChallenge(AuthenticateGenericChallengeCallParms authenticateGenericChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("authenticateGenericChallenge", new object[] {
                        authenticateGenericChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse EndauthenticateGenericChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public void authenticateGenericChallengeAsync(AuthenticateGenericChallengeCallParms authenticateGenericChallengeCallParms) {
            this.authenticateGenericChallengeAsync(authenticateGenericChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void authenticateGenericChallengeAsync(AuthenticateGenericChallengeCallParms authenticateGenericChallengeCallParms, object userState) {
            if ((this.authenticateGenericChallengeOperationCompleted == null)) {
                this.authenticateGenericChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateGenericChallengeOperationCompleted);
            }
            this.InvokeAsync("authenticateGenericChallenge", new object[] {
                        authenticateGenericChallengeCallParms}, this.authenticateGenericChallengeOperationCompleted, userState);
        }
        
        private void OnauthenticateGenericChallengeOperationCompleted(object arg) {
            if ((this.authenticateGenericChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateGenericChallengeCompleted(this, new authenticateGenericChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticateGenericChallengeExReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public GenericAuthenticateExResponse authenticateGenericChallengeEx([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] AuthenticateGenericChallengeCallParmsEx authenticateGenericChallengeCallParmsEx) {
            object[] results = this.Invoke("authenticateGenericChallengeEx", new object[] {
                        authenticateGenericChallengeCallParmsEx});
            return ((GenericAuthenticateExResponse)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BeginauthenticateGenericChallengeEx(AuthenticateGenericChallengeCallParmsEx authenticateGenericChallengeCallParmsEx, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("authenticateGenericChallengeEx", new object[] {
                        authenticateGenericChallengeCallParmsEx}, callback, asyncState);
        }
        
    ///  <remarks/>
        public GenericAuthenticateExResponse EndauthenticateGenericChallengeEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GenericAuthenticateExResponse)(results[0]));
        }
        
    ///  <remarks/>
        public void authenticateGenericChallengeExAsync(AuthenticateGenericChallengeCallParmsEx authenticateGenericChallengeCallParmsEx) {
            this.authenticateGenericChallengeExAsync(authenticateGenericChallengeCallParmsEx, null);
        }
        
    ///  <remarks/>
        public void authenticateGenericChallengeExAsync(AuthenticateGenericChallengeCallParmsEx authenticateGenericChallengeCallParmsEx, object userState) {
            if ((this.authenticateGenericChallengeExOperationCompleted == null)) {
                this.authenticateGenericChallengeExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateGenericChallengeExOperationCompleted);
            }
            this.InvokeAsync("authenticateGenericChallengeEx", new object[] {
                        authenticateGenericChallengeCallParmsEx}, this.authenticateGenericChallengeExOperationCompleted, userState);
        }
        
        private void OnauthenticateGenericChallengeExOperationCompleted(object arg) {
            if ((this.authenticateGenericChallengeExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateGenericChallengeExCompleted(this, new authenticateGenericChallengeExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getCombinedChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public CombinedChallenge getCombinedChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] GetCombinedChallengeCallParms getCombinedChallengeCallParms) {
            object[] results = this.Invoke("getCombinedChallenge", new object[] {
                        getCombinedChallengeCallParms});
            return ((CombinedChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BegingetCombinedChallenge(GetCombinedChallengeCallParms getCombinedChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCombinedChallenge", new object[] {
                        getCombinedChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public CombinedChallenge EndgetCombinedChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedChallenge)(results[0]));
        }
        
    ///  <remarks/>
        public void getCombinedChallengeAsync(GetCombinedChallengeCallParms getCombinedChallengeCallParms) {
            this.getCombinedChallengeAsync(getCombinedChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void getCombinedChallengeAsync(GetCombinedChallengeCallParms getCombinedChallengeCallParms, object userState) {
            if ((this.getCombinedChallengeOperationCompleted == null)) {
                this.getCombinedChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCombinedChallengeOperationCompleted);
            }
            this.InvokeAsync("getCombinedChallenge", new object[] {
                        getCombinedChallengeCallParms}, this.getCombinedChallengeOperationCompleted, userState);
        }
        
        private void OngetCombinedChallengeOperationCompleted(object arg) {
            if ((this.getCombinedChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCombinedChallengeCompleted(this, new getCombinedChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticateCombinedChallengeReturn", Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
        public CombinedAuthenticateResponse authenticateCombinedChallenge([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")] AuthenticateCombinedChallengeCallParms authenticateCombinedChallengeCallParms) {
            object[] results = this.Invoke("authenticateCombinedChallenge", new object[] {
                        authenticateCombinedChallengeCallParms});
            return ((CombinedAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public System.IAsyncResult BeginauthenticateCombinedChallenge(AuthenticateCombinedChallengeCallParms authenticateCombinedChallengeCallParms, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("authenticateCombinedChallenge", new object[] {
                        authenticateCombinedChallengeCallParms}, callback, asyncState);
        }
        
    ///  <remarks/>
        public CombinedAuthenticateResponse EndauthenticateCombinedChallenge(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedAuthenticateResponse)(results[0]));
        }
        
    ///  <remarks/>
        public void authenticateCombinedChallengeAsync(AuthenticateCombinedChallengeCallParms authenticateCombinedChallengeCallParms) {
            this.authenticateCombinedChallengeAsync(authenticateCombinedChallengeCallParms, null);
        }
        
    ///  <remarks/>
        public void authenticateCombinedChallengeAsync(AuthenticateCombinedChallengeCallParms authenticateCombinedChallengeCallParms, object userState) {
            if ((this.authenticateCombinedChallengeOperationCompleted == null)) {
                this.authenticateCombinedChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateCombinedChallengeOperationCompleted);
            }
            this.InvokeAsync("authenticateCombinedChallenge", new object[] {
                        authenticateCombinedChallengeCallParms}, this.authenticateCombinedChallengeOperationCompleted, userState);
        }
        
        private void OnauthenticateCombinedChallengeOperationCompleted(object arg) {
            if ((this.authenticateCombinedChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateCombinedChallengeCompleted(this, new authenticateCombinedChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
    ///  <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <summary>
    ///   A name/value pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class NameValue {
        
        private string nameField;
        
        private string valueField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The value.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure defines the data returned after a successful combined 
    ///   challenge authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CombinedAuthenticateResponse {
        
        private CardData cardInfoField;
        
        private TokenData tokenInfoField;
        
        private PasswordInfo passwordInfoField;
        
        private NameValue[] authenticationSecretsField;
        
        private SharedSecret[] sharedSecretsField;
        
        private AuthenticationFault warningFaultField;
        
        private IPLocation iPLocationField;
        
        private DeliveryMechanism[] deliveryMechanismUsedField;
        
        private DeliveryMechanism[] deliveryMechanismFailedField;
        
        private AuthenticationFault[] deliveryMechanismFailureReasonField;
        
        private System.Nullable<bool> oTPDynamicRefreshField;
        
        private System.Nullable<bool> oTPNewGeneratedField;
        
        private string groupField;
        
        private string userNameField;
        
        private string fullNameField;
        
        private NameValues[] retrievedRepositoryAttributesField;
        
        private string[] accessGroupsField;
        
    /// <datatype>
    ///   CardData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the card used during 
    ///   authentication. It will be null if a card was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CardData cardInfo {
            get {
                return this.cardInfoField;
            }
            set {
                this.cardInfoField = value;
            }
        }
        
    /// <datatype>
    ///   TokenData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the token used during 
    ///   authentication. It will be null if a token was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenData tokenInfo {
            get {
                return this.tokenInfoField;
            }
            set {
                this.tokenInfoField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordInfo
    /// </datatype>
    /// <value>
    ///   This structure contains information about the password used during 
    ///   authentication. It will be null if a password was not used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordInfo PasswordInfo {
            get {
                return this.passwordInfoField;
            }
            set {
                this.passwordInfoField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   A list of authentication secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included 
    ///   authentication secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] AuthenticationSecrets {
            get {
                return this.authenticationSecretsField;
            }
            set {
                this.authenticationSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   An array of Shared Secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included shared 
    ///   secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SharedSecrets {
            get {
                return this.sharedSecretsField;
            }
            set {
                this.sharedSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   A fault indicating that an error occurred updating authentication or 
    ///   shared secrets but the response was successfully authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault WarningFault {
            get {
                return this.warningFaultField;
            }
            set {
                this.warningFaultField = value;
            }
        }
        
    /// <datatype>
    ///   IPLocation
    /// </datatype>
    /// <value>
    ///   If the request included an IP address to be registered, this attribute 
    ///   will include the location of that IP address. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPLocation IPLocation {
            get {
                return this.iPLocationField;
            }
            set {
                this.iPLocationField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs were successfully delivered during the authentication, this 
    ///   attribute will specify the delivery mechanisms that were used to 
    ///   successfully deliver the OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismUsed {
            get {
                return this.deliveryMechanismUsedField;
            }
            set {
                this.deliveryMechanismUsedField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs failed delivery during the authentication, this attribute will 
    ///   specify the delivery mechanisms that failed delivery. The 
    ///   deliveryMechanismFailureReason attribute will have a corresponding entry 
    ///   describing why delivery failed. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismFailed {
            get {
                return this.deliveryMechanismFailedField;
            }
            set {
                this.deliveryMechanismFailedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the reason why each corresponding 
    ///   delivery mechanism specified in the deliveryMechanismFailed attribute failed 
    ///   to deliver OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationFault[] deliveryMechanismFailureReason {
            get {
                return this.deliveryMechanismFailureReasonField;
            }
            set {
                this.deliveryMechanismFailureReasonField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication was performed.
    ///   This flag will indicate if OTP dynamic refresh was enabled or not. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPDynamicRefresh {
            get {
                return this.oTPDynamicRefreshField;
            }
            set {
                this.oTPDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication was performed and OTP dynamic 
    ///   refresh is enabled. This flag will indicate if new OTPs were generated as 
    ///   part of this authentication. If OTPs were generated and not delivered 
    ///   (as indicated by the deliveryMechanismUsed attribute) then the 
    ///   application may be required to deliver the OTPs directly using the 
    ///   administration API to retrieve the OTP values. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPNewGenerated {
            get {
                return this.oTPNewGeneratedField;
            }
            set {
                this.oTPNewGeneratedField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The full name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
    /// <datatype>
    ///   NameValues[]
    /// </datatype>
    /// <value>
    ///   A list of attribute values that were searched for based on the 
    ///   attribute names provided within the retrieveRepositoryAttributes member of 
    ///   the CombinedAuthenticateParms object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValues[] retrievedRepositoryAttributes {
            get {
                return this.retrievedRepositoryAttributesField;
            }
            set {
                this.retrievedRepositoryAttributesField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The access groups associated with this user.
    ///   The access groups may be based on policy or may be specific to the 
    ///   user based on the user access group override policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] AccessGroups {
            get {
                return this.accessGroupsField;
            }
            set {
                this.accessGroupsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains details about the card that was used to 
    ///   authenticate a user. It is returned as part of the response after a user 
    ///   successfully authenticates. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class CardData {
        
        private string serialNumberField;
        
        private System.DateTime expiryDateField;
        
        private System.DateTime supersededDateField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The serial number of the card used for authentication.
    ///   This will be empty if a temporary pin was used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The expiry date of the card used for authentication.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The supersede date of the card used for authentication.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime SupersededDate {
            get {
                return this.supersededDateField;
            }
            set {
                this.supersededDateField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a token that can be used to 
    ///   authenticate. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class TokenData {
        
        private string vendorIdField;
        
        private string serialNumberField;
        
        private string tokenSetField;
        
        private bool supportsDataSignatureField;
        
        private bool supportsMutualAuthenticationField;
        
        private bool supportsDeliveryAndSignatureField;
        
        private bool supportsOnlineTransactionsField;
        
        private bool supportsOfflineTransactionsField;
        
        private DeliveryStatus deliveryStatusField;
        
        private string offlineChallengeField;
        
        private byte[] offlineChallengeQRCodeField;
        
        private string tokenCREncodedChallengeField;
        
        private byte[] tokenCRChallengeQRCodeField;
        
        private string mutualAuthenticationResponseField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This value will contain the name of the token vendor if defined. 
    ///   Otherwise, this value will contain the vendor id of the token. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The serial number of the token.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The set of the token.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TokenSet {
            get {
                return this.tokenSetField;
            }
            set {
                this.tokenSetField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports the data signature operation. 
    ///   Note that a value of true does not indicate if the user's policy 
    ///   allows the data signature operation to be performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsDataSignature {
            get {
                return this.supportsDataSignatureField;
            }
            set {
                this.supportsDataSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports mutual authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsMutualAuthentication {
            get {
                return this.supportsMutualAuthenticationField;
            }
            set {
                this.supportsMutualAuthenticationField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports the delivery and signature 
    ///   operation where Entrust IdentityGuard delivers transaction details to 
    ///   the user's token where they are used to calculate the token response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsDeliveryAndSignature {
            get {
                return this.supportsDeliveryAndSignatureField;
            }
            set {
                this.supportsDeliveryAndSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports online transactions
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsOnlineTransactions {
            get {
                return this.supportsOnlineTransactionsField;
            }
            set {
                this.supportsOnlineTransactionsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if the vendor of this token supports offline 
    ///   transactions. Since a token using offline transactions may not have network 
    ///   connectivity, we can't rely on the token having connected to 
    ///   IdentityGuard to register with IdentityGuard whether it supports offline 
    ///   transactions or not. Therefore, we base the setting of this flag on 
    ///   whether the vendor can support offline transactions. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsOfflineTransactions {
            get {
                return this.supportsOfflineTransactionsField;
            }
            set {
                this.supportsOfflineTransactionsField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryStatus
    /// </datatype>
    /// <value>
    ///   A value indicating if transaction details were delivered as part of 
    ///   generating the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DeliveryStatus DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When an offline transaction challenge is being requested this value 
    ///   will specify the offline transaction challenge value. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string OfflineChallenge {
            get {
                return this.offlineChallengeField;
            }
            set {
                this.offlineChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   When an offline transaction challenge is being requested this value 
    ///   will specify the offline transaction challenge encoded as a QR code. 
    ///   This value should be displayed by the application so that it can be 
    ///   scanned by the Entrust IdentityGuard mobile application. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] OfflineChallengeQRCode {
            get {
                return this.offlineChallengeQRCodeField;
            }
            set {
                this.offlineChallengeQRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When a token CR challenge has been generated and encoded as a QR code, 
    ///   this value will specify the challenge value encoded into the QR code 
    ///   if available from the token vendor. For some token vendors, this 
    ///   value may be a URL that can be used by the application. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TokenCREncodedChallenge {
            get {
                return this.tokenCREncodedChallengeField;
            }
            set {
                this.tokenCREncodedChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   When a token CR challenge has been generated and encoded as a QR code, 
    ///   this value will specify the QR code value. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] TokenCRChallengeQRCode {
            get {
                return this.tokenCRChallengeQRCodeField;
            }
            set {
                this.tokenCRChallengeQRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this value is being returned as part of a mutual authentication 
    ///   challenge this attribute includes the mutual authentication response for 
    ///   this token. Otherwise this value will be null. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string MutualAuthenticationResponse {
            get {
                return this.mutualAuthenticationResponseField;
            }
            set {
                this.mutualAuthenticationResponseField = value;
            }
        }
    }
    
    /// <summary>
    ///   This enumerated type defines the possible results of delivering 
    ///   transaction details to a token or smart credential. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum DeliveryStatus {
        
    /// <value>
    ///   The transaction details were successfully delivered to the transaction 
    ///   service. 
    /// </value>
        OK,
        
    /// <value>
    ///   An attempt to deliver the transaction details to the transaction 
    ///   service failed. This status probably indicates that either the transaction 
    ///   service was not running or the configured password was incorrect. 
    /// </value>
        ERROR,
        
    /// <value>
    ///   Transaction delivery would have been performed for this request but 
    ///   the transaction service was not configured. 
    /// </value>
        NONE,
        
    /// <value>
    ///   Transaction delivery was not applicable for this token or smart 
    ///   credential. 
    ///   This might indicate that transaction details were not specified for 
    ///   this operation, the token or smart credential does not support delivery 
    ///   of transaction details or delivery of transaction details was 
    ///   disabled for this request. 
    /// </value>
        NA,
    }
    
    /// <summary>
    ///   This structure contains information about the user's password. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class PasswordInfo {
        
        private System.DateTime expiryDateField;
        
        private System.DateTime allowChangeAfterDateField;
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The expiry date of the password used for authentication.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The date after which a user password change will be allowed.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime AllowChangeAfterDate {
            get {
                return this.allowChangeAfterDateField;
            }
            set {
                this.allowChangeAfterDateField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines a shared secret. Shared secrets are name/value pairs that can 
    ///   be set and retrieved during user authentication. They can be used to 
    ///   allow an application to store details about a user that are only 
    ///   released after a user has successfully authenticated, possibly allowing 
    ///   the application to perform further authentication of the user. 
    ///   <p>
    ///   Shared secrets are not used by Entrust IdentityGuard for 
    ///   authentication purposes. 
    ///   </p>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class SharedSecret {
        
        private string nameField;
        
        private string valueField;
        
        private System.Nullable<bool> writeOnlyField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the shared secret. This name is unique for each user. 
    ///   <p>
    ///   Note that this value can be omitted, however, this is only to allow 
    ///   the server to treat it being missing as a non-fatal error (rather than 
    ///   a schema validation error). This value should always be specified. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The value of the shared secret.
    ///   <p>
    ///   Note that this value can be omitted, however, this is only to allow 
    ///   the server to treat it being missing as a non-fatal error (rather than 
    ///   a schema validation error). This value should always be specified. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the client application can only write and 
    ///   remove the value but can not view it. In this case, only system 
    ///   administrators can view the secret. This value defaults to false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> WriteOnly {
            get {
                return this.writeOnlyField;
            }
            set {
                this.writeOnlyField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines the base fault that will be returned when operations fail. 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationPasswordChangeRequiredFault))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationSystemFault))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuthenticationServiceFault))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationFault {
        
        private ErrorCode errorCodeField;
        
        private string internalCodeField;
        
        private string errorMessageField;
        
        private string idField;
        
        private string[] paramsField;
        
    /// <datatype>
    ///   ErrorCode
    /// </datatype>
    /// <value>
    ///   The error code indicating the reason for the failure.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ErrorCode ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The internal code indicating the reason for the failure. This code 
    ///   corresponds to the codes documented in the error guide and values logged 
    ///   by the Entrust IdentityGuard Server. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InternalCode {
            get {
                return this.internalCodeField;
            }
            set {
                this.internalCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The error message corresponding to the internal code.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string errorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   An instance-specific value that will be included in the Entrust 
    ///   IdentityGuard logs to help correlate returned errors with logged 
    ///   information. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   A list of the parameters associated with the error message of this 
    ///   exception. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines the error codes that will be included in exceptions returned 
    ///   from the service. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public enum ErrorCode {
        
    /// <value>
    ///   The response to a challenge was not valid.
    /// </value>
        INVALID_RESPONSE,
        
    /// <value>
    ///   A call was made to authenticate a user using a card, but the user does 
    ///   not have any cards in the CURRENT or PENDING states. 
    /// </value>
        NO_ACTIVE_CARDS,
        
    /// <value>
    ///   A call was made to authenticate a user using a card, but the user does 
    ///   not have any cards that have not expired. 
    /// </value>
        NO_VALID_CARDS,
        
    /// <value>
    ///   A call was made to authenticate a user using a card, but the card used 
    ///   has been superseded by a more recently issued card. 
    /// </value>
        CARD_SUPERSEDED,
        
    /// <value>
    ///   A call was made to authenticate a user, but the user does not exist in 
    ///   the Entrust IdentityGuard system. 
    /// </value>
        USER_DOES_NOT_EXIST,
        
    /// <value>
    ///   A call was made specifying a user name without specifying the user's 
    ///   group name, and multiple users were found in different groups with the 
    ///   same user name. The user's group must be specified in the call to 
    ///   fully qualify the user. 
    /// </value>
        USERNAME_NOT_UNIQUE,
        
    /// <value>
    ///   A call was made to authenticate a user using a temporary PIN, but the 
    ///   PIN has expired. 
    /// </value>
        PIN_EXPIRED,
        
    /// <value>
    ///   A call was made to authenticate a user using a temporary PIN, but the 
    ///   PIN has been used too many times already. 
    /// </value>
        PIN_MAX_USES,
        
    /// <value>
    ///   A call was made to authenticate a user, but the user does not have a 
    ///   challenge assigned to them. Before authenticating a user, the user 
    ///   must have obtained a challenge. 
    /// </value>
        USER_NO_CHALLENGE,
        
    /// <value>
    ///   A parameter passed to one of the operations was not valid. For 
    ///   example, passing an empty user ID. 
    /// </value>
        INVALID_PARAMETER,
        
    /// <value>
    ///   A call was made to use one of the anonymous authentication operations, 
    ///   but the server's policy does not allow anonymous authentication. 
    /// </value>
        ANON_AUTH_DISABLED,
        
    /// <value>
    ///   An error occurred in the server. For example, a loss of connection to 
    ///   the database or directory. 
    /// </value>
        SYSTEM_ERROR,
        
    /// <value>
    ///   An error occurred updating the user's information after a successful 
    ///   authentication. 
    /// </value>
        USER_UPDATE_ERROR,
        
    /// <value>
    ///   An operation included new authentication or shared secrets, but the 
    ///   number of authentication/shared secrets assigned to the user would 
    ///   exceed the maximum number defined in the policy. 
    /// </value>
        SHARED_SECRET_MAX_NUM,
        
    /// <value>
    ///   An operation included new authentication or shared secrets, but the 
    ///   number of authentication/shared secrets assigned to the user would 
    ///   exceed the maximum size defined in the policy. 
    /// </value>
        SHARED_SECRET_MAX_VALUE_SIZE,
        
    /// <value>
    ///   An authentication operation included authentication or shared secrets 
    ///   to be removed, but the user does not have the specified secrets. 
    /// </value>
        SHARED_SECRET_REMOVE_ERROR,
        
    /// <value>
    ///   An authentication operation included authentication or shared secrets 
    ///   to be set, and there was an error setting the new secrets. This is 
    ///   usually caused by setting the same secret more than once. 
    /// </value>
        SHARED_SECRET_SET_ERROR,
        
    /// <value>
    ///   An operation included authentication or shared secrets to retrieve, 
    ///   but the user did not have one of the requested secrets. 
    /// </value>
        SHARED_SECRET_GET_ERROR,
        
    /// <value>
    ///   An operation was called specifying a user who has responded 
    ///   incorrectly to a challenge too many times. 
    ///   The user is locked out of their account.
    /// </value>
        USER_LOCKED,
        
    /// <value>
    ///   An operation was made to authenticate a user and the response was 
    ///   incorrect. The user is locked out of their account. 
    /// </value>
        AUTH_FAILED_USER_LOCKED,
        
    /// <value>
    ///   A Question and Answer challenge was requested for a user, but the 
    ///   number of questions requested exceeds the number of questions and answers 
    ///   that have been registered for the user. 
    /// </value>
        QA_NOT_ENOUGH_QUESTIONS,
        
    /// <value>
    ///   Authentication of a Question and Answer challenge was attempted with a 
    ///   Number of Wrong Answers Allowed value that exceeds the Maximum Wrong 
    ///   Answers Allowed policy or is less than zero or is greater than or 
    ///   equal to the challenge size. 
    /// </value>
        QA_INVALID_NUM_WRONG_ANSWERS_ALLOWED_VALUE,
        
    /// <value>
    ///   An attempt was made to get a challenge of a particular type for a 
    ///   user, but that type is not allowed by the user's policy. 
    /// </value>
        AUTH_TYPE_NOT_ALLOWED,
        
    /// <value>
    ///   A user was attempting to authenticate using a one-time password (OTP), 
    ///   but they have not been assigned an OTP. 
    /// </value>
        NO_OTP,
        
    /// <value>
    ///   A user was attempting to authenticate using a one-time password (OTP), 
    ///   but the OTP has expired. 
    /// </value>
        OTP_EXPIRED,
        
    /// <value>
    ///   A user was attempting to authenticate using a one-time password (OTP), 
    ///   but the OTP authentication mechanism was disabled for the user. 
    /// </value>
        OTP_DISABLED,
        
    /// <value>
    ///   A one-time password (OTP) delivery has failed.
    ///   This could be the result of an invalid delivery configuration, invalid 
    ///   user contact information, an unresponsive delivery service, or 
    ///   missing user information. 
    /// </value>
        OTP_DELIVERY_FAILED,
        
    /// <value>
    ///   A call was made to authenticate a user using a token. The user does 
    ///   not have any tokens in the CURRENT or PENDING states. 
    /// </value>
        NO_ACTIVE_TOKENS,
        
    /// <value>
    ///   A call was made to get a TOKENRO or TOKENCR challenge for a user using 
    ///   a token. The user does not have any tokens in the CURRENT or PENDING 
    ///   states, and they have a temporary PIN that is no longer valid. 
    /// </value>
        NO_VALID_TOKENS,
        
    /// <value>
    ///   A call was made to authenticate a token PIN response. Either the token 
    ///   required a PIN change and no PIN change was specified, or a PIN 
    ///   change was specified and was invalid. 
    /// </value>
        INVALID_TOKEN_PIN_CHANGE,
        
    /// <value>
    ///   A call was made to get an EXTERNAL challenge for a user, but the user 
    ///   has not been configured to allow external authentication. 
    /// </value>
        NO_EXTERNAL_AUTH_CONFIGURED,
        
    /// <value>
    ///   The requested operation cannot proceed because the user is in the 
    ///   SUSPENDED state. 
    /// </value>
        USER_SUSPENDED,
        
    /// <value>
    ///   A call was made to authenticate a user, but the user activation grace 
    ///   period is over. 
    /// </value>
        ACTIVATION_EXPIRED,
        
    /// <value>
    ///   A call was made to authenticate a user, but the user has no active 
    ///   card and the activation grace period is over. 
    /// </value>
        NO_ACTIVE_CARD_AFTER_ACTIVATION,
        
    /// <value>
    ///   A call was made to authenticate a user, but the user has no active 
    ///   token and the activation grace period is over. 
    /// </value>
        NO_ACTIVE_TOKEN_AFTER_ACTIVATION,
        
    /// <value>
    ///   A call was made to authenticate a user using PASSWORD authentication 
    ///   but the user does not have a password. 
    /// </value>
        NO_PASSWORD,
        
    /// <value>
    ///   A call was made to authenticate a user using PASSWORD authentication. 
    ///   A password change was required but a new password was not specified. 
    /// </value>
        PASSWORD_CHANGE_REQUIRED,
        
    /// <value>
    ///   A call was made to change the password for a user, but the operation 
    ///   failed. 
    /// </value>
        PASSWORD_CHANGE_FAILED,
        
    /// <value>
    ///   A personal verification number is required for a successful 
    ///   authentication, and in order to specify a new personal verification number. 
    /// </value>
        PVN_REQUIRED,
        
    /// <value>
    ///   Either an incorrect personal verification number has been provided, or 
    ///   the user does not have a personal verification number. 
    /// </value>
        PVN_INVALID,
        
    /// <value>
    ///   A personal verification number change is required for a successful 
    ///   authentication. 
    /// </value>
        PVN_CHANGE_REQUIRED,
        
    /// <value>
    ///   The new Personal Verification Number did not match the confirmation 
    ///   PVN, or the length of the new PVN is incorrect, or the new PVN contains 
    ///   non-digit characters. 
    /// </value>
        PVN_CHANGE_INVALID,
        
    /// <value>
    ///   The attempted operation is not supported.
    /// </value>
        NOT_SUPPORTED,
        
    /// <value>
    ///   An invalid IP address was specified.
    /// </value>
        INVALID_IP_ADDRESS,
        
    /// <value>
    ///   The certificate value specified as a parameter for risk-based 
    ///   certificate authentication was not a valid X.509 certificate. 
    /// </value>
        INVALID_CERTIFICATE,
        
    /// <value>
    ///   An error was encountered validating the transaction details during 
    ///   authentication. 
    ///   Either the transaction details in the authentication request do not 
    ///   match the transaction details previously specified in the challenge 
    ///   request or the transaction has expired. 
    /// </value>
        TRANSACTION_VALIDATION_ERROR,
        
    /// <value>
    ///   An error was encountered validating the transaction details during 
    ///   authentication. 
    ///   Either the transaction details in the authentication request do not 
    ///   match the transaction details previously specified in the challenge 
    ///   request or the transaction has expired. 
    ///   This authentication failure has also caused the user to become locked 
    ///   out. 
    /// </value>
        TRANSACTION_VALIDATION_ERROR_USER_LOCKED,
        
    /// <value>
    ///   An error was encountered trying to sign a transaction receipt. Either 
    ///   an active transaction certificate is not defined or the active 
    ///   transaction certificate is not in its validity period. 
    /// </value>
        TRANSACTION_RECEIPT_SIGNATURE_FAILURE,
        
    /// <value>
    ///   A call was made to get a certificate challenge or authenticate a 
    ///   certificate response for a user who does not have any user certificates in 
    ///   the active state. 
    /// </value>
        NO_ACTIVE_CERTIFICATES,
        
    /// <value>
    ///   A call was made to get a certificate challenge to deliver a security 
    ///   challenge to smart credentials for a user who does not have any user 
    ///   smart credentials in the active state that have been registered to 
    ///   receive security challenges. 
    /// </value>
        NO_ACTIVE_SMARTCREDENTIALS,
        
    /// <value>
    ///   The requested operation cannot proceed because the user's account in 
    ///   the repository has been disabled. 
    ///   This only applies to users with LDAP directory accounts.
    /// </value>
        REPOSITORY_ACCOUNT_DISABLED,
        
    /// <value>
    ///   The requested operation cannot proceed because the user's account in 
    ///   the repository has expired. 
    ///   This only applies to users with LDAP directory accounts.
    /// </value>
        REPOSITORY_ACCOUNT_EXPIRED,
        
    /// <value>
    ///   The requested operation cannot proceed because the user's account in 
    ///   the repository has been orphaned. 
    ///   This only applies to users with Database accounts.
    /// </value>
        REPOSITORY_ACCOUNT_ORPHANED,
        
    /// <value>
    ///   This error indicates that a response isn't available. It may be 
    ///   generated when performing an authenticateGenericChallenge where the 
    ///   response isn't specified and is expected to have been delivered to Entrust 
    ///   IdentityGuard. 
    /// </value>
        NO_RESPONSE,
        
    /// <value>
    ///   This error indicates that an out of band response for a certificate 
    ///   challenge was received but indicated a concern with the transaction. 
    /// </value>
        TRANSACTION_CONCERN,
        
    /// <value>
    ///   This error indicates that an out of band response for a certificate 
    ///   challenge was received but indicated that the transaction was canceled. 
    /// </value>
        TRANSACTION_CANCEL,
        
    /// <value>
    ///   This error indicates that an out of band response for a certificate 
    ///   challenge was received but was invalid. 
    /// </value>
        TRANSACTION_INVALID,
        
    /// <value>
    ///   This error indicates that Entrust IdentityGuard was unable to make a 
    ///   required delivery of a certificate challenge to all of the user's 
    ///   available smart credentials. 
    /// </value>
        DELIVERY_FAILED,
        
    /// <value>
    ///   A call was made to authenticate a user using a biometric but the user 
    ///   does not have any enrolled biometrics in the ACTIVE state. 
    /// </value>
        NO_ACTIVE_BIOMETRICS,
        
    /// <value>
    ///   A call was made to retrieve offline OTPs from a token that does not 
    ///   support the feature. 
    /// </value>
        OFFLINE_OTP_NOT_SUPPORTED,
        
    /// <value>
    ///   A call was made to retrieve offline OTPs from a token that supports 
    ///   the feature, but the policy does not enable the feature. 
    /// </value>
        OFFLINE_OTP_NOT_ALLOWED,
        
    /// <value>
    ///   A call was made to retrieve offline OTPs from a token that supports 
    ///   the feature, but the policy requires that the user has a PVN, but the 
    ///   user does not have one. 
    /// </value>
        OFFLINE_OTP_REQUIRES_PVN,
        
    /// <value>
    ///   A call was made to retrieve offline OTPs from a token that supports 
    ///   the feature, but the shared secret provided by the client does not 
    ///   match the one recorded for the token. 
    /// </value>
        OFFLINE_OTP_BAD_SECRET,
        
    /// <value>
    ///   A call was made to retrieve offline OTPs from a token that supports 
    ///   the feature, but the client is not registered with the token and the 
    ///   maximum number of clients has been reached. 
    /// </value>
        OFFLINE_OTP_MAX_CLIENTS,
        
    /// <value>
    ///   A call was made to change the password and the PVN for a user, but 
    ///   both operations failed. 
    /// </value>
        PASSWORD_AND_PVN_CHANGE_FAILED,
        
    /// <value>
    ///   An internal error that is mapped to a new ErrorCode in a future 
    ///   version of the API. 
    /// </value>
        FUTURE_ERROR,
    }
    
    /// <summary>
    ///   Defines an exception returned when an operation fails because the user 
    ///   requires a password change. In addition to the values included in 
    ///   the AuthenticationFault, it also includes the current password rules 
    ///   which define the requirements of the new password. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationPasswordChangeRequiredFault : AuthenticationFault {
        
        private PasswordRules passwordRulesField;
        
    /// <datatype>
    ///   PasswordRules
    /// </datatype>
    /// <value>
    ///   The password rules defining the requirements for the new password. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PasswordRules PasswordRules {
            get {
                return this.passwordRulesField;
            }
            set {
                this.passwordRulesField = value;
            }
        }
    }
    
    /// <summary>
    ///   This type defines the password rules required by a given user's 
    ///   password policy. Used to allow validation of the user password when doing a 
    ///   password change. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class PasswordRules {
        
        private int minimumLengthField;
        
        private PasswordCharacterType numberField;
        
        private int numberRequiredField;
        
        private PasswordCharacterType upperCaseField;
        
        private int upperCaseRequiredField;
        
        private PasswordCharacterType lowerCaseField;
        
        private int lowerCaseRequiredField;
        
        private PasswordCharacterType specialCharField;
        
        private int specialCharRequiredField;
        
        private int maxRepeatedCharsField;
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The minimum number of characters required for the password.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int minimumLength {
            get {
                return this.minimumLengthField;
            }
            set {
                this.minimumLengthField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordCharacterType
    /// </datatype>
    /// <value>
    ///   Specifies if a numeric character is required, allowed or not allowed 
    ///   in the password. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PasswordCharacterType number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If numeric characters are required, this value specifies the number of 
    ///   numeric characters required. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberRequired {
            get {
                return this.numberRequiredField;
            }
            set {
                this.numberRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordCharacterType
    /// </datatype>
    /// <value>
    ///   Specifies if a uppercase character is required, allowed or not allowed 
    ///   in the password. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PasswordCharacterType upperCase {
            get {
                return this.upperCaseField;
            }
            set {
                this.upperCaseField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If uppercase characters are required, this value specifies the number 
    ///   of uppercase characters required. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int upperCaseRequired {
            get {
                return this.upperCaseRequiredField;
            }
            set {
                this.upperCaseRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordCharacterType
    /// </datatype>
    /// <value>
    ///   Specifies if a lowercase character is required, allowed or not allowed 
    ///   in the password. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PasswordCharacterType lowerCase {
            get {
                return this.lowerCaseField;
            }
            set {
                this.lowerCaseField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If lowercase characters are required, this value specifies the number 
    ///   of lowercase characters required. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int lowerCaseRequired {
            get {
                return this.lowerCaseRequiredField;
            }
            set {
                this.lowerCaseRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordCharacterType
    /// </datatype>
    /// <value>
    ///   Specifies if a non-alphanumeric character is required, allowed or not 
    ///   allowed in the password. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PasswordCharacterType specialChar {
            get {
                return this.specialCharField;
            }
            set {
                this.specialCharField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If special characters are required, this value specifies the number of 
    ///   special characters required. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int specialCharRequired {
            get {
                return this.specialCharRequiredField;
            }
            set {
                this.specialCharRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The maximum number of times a character can be repeated consecutively 
    ///   in a password. A value of 0 means there is no restriction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maxRepeatedChars {
            get {
                return this.maxRepeatedCharsField;
            }
            set {
                this.maxRepeatedCharsField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines the rules used to control the content of a password.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum PasswordCharacterType {
        
    /// <value>
    ///   The password value cannot have characters of the specified type. 
    /// </value>
        NOT_ALLOWED,
        
    /// <value>
    ///   The password value can have characters of the specified type. 
    /// </value>
        ALLOWED,
        
    /// <value>
    ///   The password value must have characters of the specified type. 
    /// </value>
        REQUIRED,
    }
    
    /// <summary>
    ///   Defines an error caused by a server failure that will require 
    ///   administrator assistance to resolve. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationSystemFault : AuthenticationFault {
    }
    
    /// <summary>
    ///   Defines an error caused by anticipated authentication criteria 
    ///   failures. 
    ///   For example, an incorrect challenge response. This error can generally 
    ///   be corrected by providing alternative input for API execution. 
    ///   May require administrator assistance to resolve.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationServiceFault : AuthenticationFault {
    }
    
    /// <summary>
    ///   Defines the location of an IP address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class IPLocation {
        
        private bool privateAddressField;
        
        private string iPAddressField;
        
        private string countryField;
        
        private string countryNameField;
        
        private string regionField;
        
        private string regionNameField;
        
        private string cityField;
        
        private string iSPField;
        
        private System.Nullable<float> latitudeField;
        
        private System.Nullable<float> longitudeField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, this IP address is a private IP address as defined by RFC 
    ///   1918. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool privateAddress {
            get {
                return this.privateAddressField;
            }
            set {
                this.privateAddressField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The IP address of the location.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The country code of the location.
    ///   Private IP addresses do not have a country.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the country of the location.
    ///   Private IP addresses do not have a country.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string countryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The region code of the location.
    ///   Private IP addresses do not have a region.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the region of the location.
    ///   Private IP addresses do not have a region.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string regionName {
            get {
                return this.regionNameField;
            }
            set {
                this.regionNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The city of the location.
    ///   Private IP addresses do not have a city.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The ISP of the location.
    ///   Private IP addresses do not have an ISP.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ISP {
            get {
                return this.iSPField;
            }
            set {
                this.iSPField = value;
            }
        }
        
    /// <datatype>
    ///   float
    /// </datatype>
    /// <value>
    ///   The latitude of the location.
    ///   Private IP addresses do not have a latitude.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<float> latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
    /// <datatype>
    ///   float
    /// </datatype>
    /// <value>
    ///   The longitude of the location.
    ///   Private IP addresses do not have a longitude.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<float> longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a mechanism that can be used 
    ///   to deliver OTPs. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class DeliveryMechanism {
        
        private string contactInfoLabelField;
        
        private string deliveryConfigurationNameField;
        
        private bool defaultContactInfoField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The contact information label of the user.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string contactInfoLabel {
            get {
                return this.contactInfoLabelField;
            }
            set {
                this.contactInfoLabelField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The delivery configuration defined for the contact.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string deliveryConfigurationName {
            get {
                return this.deliveryConfigurationNameField;
            }
            set {
                this.deliveryConfigurationNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Flag indicating if this is the default contact for the user.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool defaultContactInfo {
            get {
                return this.defaultContactInfoField;
            }
            set {
                this.defaultContactInfoField = value;
            }
        }
    }
    
    /// <summary>
    ///   A name/values pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class NameValues {
        
        private string nameField;
        
        private string[] valuesField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The values.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <summary>
    ///   Parameters for a combined authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CombinedAuthenticateParms {
        
        private System.Nullable<SecurityLevel> securityLevelField;
        
        private string applicationNameField;
        
        private System.Nullable<int> challengeSizeField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private AuthenticationSecretParms authSecretParmsField;
        
        private SharedSecretParms sharedSecretParmsField;
        
        private string iPAddressField;
        
        private ExternalRiskScoreParms externalRiskScoreField;
        
        private string newPasswordField;
        
        private string passwordNameField;
        
        private string newPVNField;
        
        private string transactionIdField;
        
        private System.Nullable<bool> cancelTransactionField;
        
        private System.Nullable<bool> useDefaultDeliveryField;
        
        private System.Nullable<bool> deliverForDynamicRefreshField;
        
        private string[] retrieveRepositoryAttributesField;
        
    /// <datatype>
    ///   SecurityLevel
    /// </datatype>
    /// <value>
    ///   The security level specifying which policies to use when 
    ///   authenticating each of the responses. If no value is specified, NORMAL will be 
    ///   used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<SecurityLevel> SecurityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, this argument is the name of the application. This value 
    ///   will be included in any authentication audits so that the 
    ///   application performing the authentication can be tracked. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for a GRID challenges. If specified, it defines the 
    ///   number of cells to ask for a GRID challenge. The specified value 
    ///   must be within the range allowed by policy. 
    ///   If this value is specified, and the user does not use a GRID 
    ///   challenge, then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> ChallengeSize {
            get {
                return this.challengeSizeField;
            }
            set {
                this.challengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this argument specifies a list of authentication types 
    ///   that require a PVN for this operation. The values in this list are 
    ///   combined with the list of authentication types specified in the 
    ///   authTypesRequiringPVN policy for this user. Any authentication types 
    ///   specified in this value must be authentication types that support PVN. An 
    ///   application can use this argument to require a PVN for an authentication 
    ///   type where the PVN is not required by policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies authentication secrets to be returned, authentication 
    ///   secrets to replace or be merged with existing values or authentication 
    ///   secrets to be removed. These operations only occur after a successful 
    ///   authentication. If this value is not specified, no authentication 
    ///   secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationSecretParms authSecretParms {
            get {
                return this.authSecretParmsField;
            }
            set {
                this.authSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies shared secrets to be returned, shared secrets to replace or 
    ///   be merged with existing values or shared secrets to be removed. These 
    ///   operations only occur after a successful authentication. If this 
    ///   value is not specified, no shared secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SharedSecretParms sharedSecretParms {
            get {
                return this.sharedSecretParmsField;
            }
            set {
                this.sharedSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The IP address to be added to the user's location history once the 
    ///   response is authenticated. It can also be used by RBA to REJECT the 
    ///   authentication request by having an exception thrown. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoreParms
    /// </datatype>
    /// <value>
    ///   Parameters used to perform an external risk score.
    ///   If the session Id is provided as part of the 
    ///   authenticateCombinedChallenge call then the risk engine associated with the user will be asked 
    ///   to reset the risk score for the current session upon successful 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoreParms externalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new password provided for a password change.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPassword {
            get {
                return this.newPasswordField;
            }
            set {
                this.newPasswordField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the password to use when authenticating a password. If not 
    ///   specified, the user's default password is used. If the named 
    ///   password does not exist, an error is returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string passwordName {
            get {
                return this.passwordNameField;
            }
            set {
                this.passwordNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new personal verification number (PVN) provided for creating or 
    ///   changing a user's PVN. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPVN {
            get {
                return this.newPVNField;
            }
            set {
                this.newPVNField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this request is authenticating a token online transaction delivered 
    ///   to an Entrust IdentityGuard mobile client (push authentication), 
    ///   then instead of specifying a response, the application can specify the 
    ///   transaction id of the request. If the mobile application has returned 
    ///   a response to Entrust IdentityGuard this transaction id will be used 
    ///   to retrieve the response. If a response is not available for the 
    ///   transaction, Entrust IdentityGuard will return a NO_RESPONSE code. 
    ///   For combined authentication, a return of NO_RESPONSE signifies an 
    ///   error as the usage pattern is to only call authenticateCombinedChallenge 
    ///   once a user has responded to the push authentication request. 
    ///   At that point, the first factor value for PASSWORD or EXTERNAL should 
    ///   be passed into authenticateCombinedChallenge as one part of the 
    ///   combined response, while the other part should be an empty TOKENRO 
    ///   response together with the transaction ID being discussed here passed as a 
    ///   parameter. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   When the request includes a transactionId to check for a transaction 
    ///   response and a response is not ready for the transaction, Entrust 
    ///   IdentityGuard will return an indication that the application should try 
    ///   again later, which authenticateCombinedChallenge translates into a 
    ///   generic "failed to authenticate" exception. 
    ///   However, if the goal is to cancel a transaction that has not expired 
    ///   and for which a response has not been received, then the 
    ///   cancelTransaction parameter should be specified with the value true. In addition, 
    ///   a single CombinedResponse entry should be provided with an 
    ///   authentication type of TOKENRO and an empty response. This is the one case 
    ///   where the CombinedResponse array should contain a single entry. If this 
    ///   is done, then Entrust IdentityGuard will instead cancel the 
    ///   transaction and return an error indicating that the transaction has been 
    ///   canceled before a response was available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> cancelTransaction {
            get {
                return this.cancelTransactionField;
            }
            set {
                this.cancelTransactionField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If OTP dynamic refresh is enabled and new OTPs are generated, the OTPs 
    ///   will be delivered to the user's default delivery mechanism if this 
    ///   flag is set to true. If useDefaultDelivery is not specified (or is 
    ///   false) any OTPs will be delivered to all available delivery 
    ///   destinations, if any. This will also be the case if a given user does not have a 
    ///   default contact info entry when this option is true, or it is not 
    ///   associated with a valid delivery mechanism. 
    ///   This approach is to prevent the need to specify one or more 
    ///   user-specific contact info labels in cases where the setting of a default 
    ///   contact info entry for users is not mandatory. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> useDefaultDelivery {
            get {
                return this.useDefaultDeliveryField;
            }
            set {
                this.useDefaultDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   By default, OTPs are only delivered during authentication if dynamic 
    ///   refresh is enabled, and new OTPs are generated. If 
    ///   deliveryForDynamicRefresh is set to true, OTPs will be delivered even if new OTPs are 
    ///   not generated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> deliverForDynamicRefresh {
            get {
                return this.deliverForDynamicRefreshField;
            }
            set {
                this.deliverForDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   Defines additional LDAP attributes to search for during an 
    ///   authenticate call. All values will be returned in the 
    ///   retrievedRepositoryAttributes of the corresponding CombinedAuthenticateResponse object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] retrieveRepositoryAttributes {
            get {
                return this.retrieveRepositoryAttributesField;
            }
            set {
                this.retrieveRepositoryAttributesField = value;
            }
        }
    }
    
    /// <summary>
    ///   Each security level has a different risk-based authentication policy. 
    ///   The policy used for each authentication request will depend on which 
    ///   security level was specified in the request. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public enum SecurityLevel {
        
    /// <value>
    ///   Normal security level.
    /// </value>
        NORMAL,
        
    /// <value>
    ///   Enhanced security level.
    /// </value>
        ENHANCED,
    }
    
    /// <summary>
    ///   The supported types of authentication. These types are used with the 
    ///   generic authentication operation. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum AuthenticationType {
        
    /// <value>
    ///   Authenticate using a card with a grid containing letters and numbers. 
    ///   To use this method, a user must either have a non-expired card in the 
    ///   CURRENT or PENDING states or a temporary PIN that has not yet 
    ///   expired or used too many times. 
    /// </value>
        GRID,
        
    /// <value>
    ///   Authenticate using a set of questions and answers. The user must have 
    ///   provided answers to the questions during the registration process. 
    /// </value>
        QA,
        
    /// <value>
    ///   Authenticate using a one-time password (OTP). The OTP will be 
    ///   generated when the challenge is requested. Entrust IdentityGuard provides 
    ///   mechanisms to deliver the OTP to the user out-of-band. 
    /// </value>
        OTP,
        
    /// <value>
    ///   Authenticate using a token in response-only mode. When using this mode 
    ///   of authentication, no challenge is generated or stored for the user; 
    ///   they simply enter the value displayed on the token to authenticate. 
    ///   To use this method, a user must have a token in the CURRENT or 
    ///   PENDING state or a temporary PIN that has not yet expired or used too many 
    ///   times. 
    /// </value>
        TOKENRO,
        
    /// <value>
    ///   Authenticate using a token in challenge-response mode. When using this 
    ///   mode of authentication, a challenge is generated and stored for the 
    ///   user; they enter this value into their token and respond with the 
    ///   value generated by the token to authenticate. To use this method, a user 
    ///   must have a token in the CURRENT or PENDING state that supports 
    ///   TOKENCR or a temporary PIN that has not yet expired or used too many 
    ///   times. 
    /// </value>
        TOKENCR,
        
    /// <value>
    ///   Authenticate using an external authentication method. The external 
    ///   authentication mechanism such as LDAP or Kerberos authentication must be 
    ///   configured within Entrust IdentityGuard. 
    /// </value>
        EXTERNAL,
        
    /// <value>
    ///   Authenticate using an Entrust IdentityGuard managed password. 
    /// </value>
        PASSWORD,
        
    /// <value>
    ///   Authenticate using a certificate.
    /// </value>
        CERTIFICATE,
        
    /// <value>
    ///   Authenticate using biometrics.
    /// </value>
        BIOMETRIC,
        
    /// <value>
    ///   No authentication is required.
    /// </value>
        NONE,
    }
    
    /// <summary>
    ///   Defines authentication secret parameters which can be provided during 
    ///   a getGenericChallenge or authenticateGenericChallenge call. These 
    ///   parameters are used to control which authentication secrets are returned 
    ///   from these calls, and which are updated or removed. 
    ///   <p>
    ///   Authentication secrets can be used by an application to authenticate 
    ///   the application to the end user. For example, an application might 
    ///   gather a secret phrase from a user during user registration. After 
    ///   authentication, the application presents the user with that phrase to 
    ///   prove to the user that they have authenticated to the correct 
    ///   application. 
    ///   </p>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticationSecretParms {
        
        private NameValue[] setSecretsField;
        
        private System.Nullable<bool> mergeSecretsField;
        
        private string[] getSecretsField;
        
        private System.Nullable<bool> getAllSecretsField;
        
        private string[] removeSecretsField;
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   Defines an array of authentication secrets to assign to a user. A null 
    ///   value indicates no secrets will be created or modified. 
    ///   If an empty array is supplied and Merge is set to false, then all 
    ///   secrets are erased. 
    ///   <p>
    ///   Each secret is represented as a simple name/value pair. The names of 
    ///   the secrets are set by the calling application, and there are no 
    ///   pre-defined names. If the calling application uses multiple authentication 
    ///   secrets, that application must know which name to use. 
    ///   </p>
    ///   <p>
    ///   Note that binary values for authentication secrets are not supported. 
    ///   A binary authentication secret must first be encoded as a string 
    ///   (e.g. using base-64 encoding), and it is up to the calling application to 
    ///   decode the secret when it is retrieved. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] SetSecrets {
            get {
                return this.setSecretsField;
            }
            set {
                this.setSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set to true, the authentication secrets contained in the Set 
    ///   parameter will be added to the user's existing authentication secret 
    ///   collection. If a secret already exists, it will be updated. 
    ///   If set to false, the user's existing authentication secret collection 
    ///   will be completely replaced by the array of authentication secrets in 
    ///   the Set parameter. Defaults to false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> MergeSecrets {
            get {
                return this.mergeSecretsField;
            }
            set {
                this.mergeSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   An array of names (strings) identifying the authentication secrets to 
    ///   be retrieved. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] GetSecrets {
            get {
                return this.getSecretsField;
            }
            set {
                this.getSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set to true, retrieve the entire collection of authentication 
    ///   secrets (overrides anything passed in the Get parameter). 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> GetAllSecrets {
            get {
                return this.getAllSecretsField;
            }
            set {
                this.getAllSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   An array of names (strings) identifying authentication secrets to 
    ///   remove from the user. 
    ///   If an empty array is supplied then all secrets are erased.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] RemoveSecrets {
            get {
                return this.removeSecretsField;
            }
            set {
                this.removeSecretsField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines parameters which can be used to update and retrieve a user's 
    ///   shared secrets after a successful authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class SharedSecretParms {
        
        private SharedSecret[] setSecretsField;
        
        private System.Nullable<bool> mergeSecretsField;
        
        private string[] getSecretsField;
        
        private System.Nullable<bool> getAllSecretsField;
        
        private string[] removeSecretsField;
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   Defines an array of Shared Secrets to assign to a user. A null value 
    ///   indicates no secrets will be created or modified. 
    ///   If an empty array is supplied and Merge is set to false, then all 
    ///   secrets are erased. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SetSecrets {
            get {
                return this.setSecretsField;
            }
            set {
                this.setSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set to true, the Shared Secrets contained in the Set parameter will 
    ///   be added to the users existing Shared Secret collection. If a secret 
    ///   already exists, it will be updated. 
    ///   If set to false, the user's existing Shared Secret collection will be 
    ///   completely replaced by the array of Shared Secrets in the Set 
    ///   parameter. 
    ///   Defaults to false.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> MergeSecrets {
            get {
                return this.mergeSecretsField;
            }
            set {
                this.mergeSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   An array of names (strings) identifying the Shared Secrets to be 
    ///   retrieved after a successful authentication. 
    ///   Secrets that were created with WriteOnly set to true will not be 
    ///   retrieved. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] GetSecrets {
            get {
                return this.getSecretsField;
            }
            set {
                this.getSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set to true, retrieve the entire collection of Shared Secrets. 
    ///   Secrets that were created with WriteOnly set to true will not be 
    ///   retrieved. 
    ///   This value overrides the Get parameter.
    ///   Defaults to false.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> GetAllSecrets {
            get {
                return this.getAllSecretsField;
            }
            set {
                this.getAllSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   An array of names (strings) identifying Shared Secrets to remove from 
    ///   the user. 
    ///   If an empty array is supplied then all Shared Secrets are erased. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] RemoveSecrets {
            get {
                return this.removeSecretsField;
            }
            set {
                this.removeSecretsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure includes parameters passed to an external risk score 
    ///   application such as Entrust TransactionGuard to generate an external 
    ///   risk score used as part of risk-based authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class ExternalRiskScoreParms {
        
        private string sessionIdField;
        
        private NameValue[] riskArgumentsField;
        
        private System.Nullable<int> riskScoreField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The external risk-score session Id. If provided the session Id will be 
    ///   passed to an external risk engine which is expected to return a risk 
    ///   score for the specified session. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   An optional list of arguments that will be passed to the external risk 
    ///   engines along with the session Id. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] RiskArguments {
            get {
                return this.riskArgumentsField;
            }
            set {
                this.riskArgumentsField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   An optional risk score provided by the application.
    ///   If specified, the SessionId is ignored and the provided risk score is 
    ///   used instead of calling out to external risk engines to calculate the 
    ///   risk score. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> RiskScore {
            get {
                return this.riskScoreField;
            }
            set {
                this.riskScoreField = value;
            }
        }
    }
    
    /// <summary>
    ///   The response to an IG combined challenge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CombinedResponse {
        
        private AuthenticationType authenticationTypeField;
        
        private string[] responseField;
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of challenge being authenticated.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AuthenticationType AuthenticationType {
            get {
                return this.authenticationTypeField;
            }
            set {
                this.authenticationTypeField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The response specified as a list of strings.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   authenticateCombinedChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticateCombinedChallengeCallParms {
        
        private string userIdField;
        
        private string pVNField;
        
        private CombinedResponse[] responsesField;
        
        private CombinedAuthenticateParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to authenticate.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The personal verification number (PVN).
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string PVN {
            get {
                return this.pVNField;
            }
            set {
                this.pVNField = value;
            }
        }
        
    /// <datatype>
    ///   CombinedResponse[]
    /// </datatype>
    /// <value>
    ///   The set of responses to the challenge. This is a list of 
    ///   authentication types together with a challenge response for each type, where the 
    ///   response itself is an array of strings. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public CombinedResponse[] responses {
            get {
                return this.responsesField;
            }
            set {
                this.responsesField = value;
            }
        }
        
    /// <datatype>
    ///   CombinedAuthenticateParms
    /// </datatype>
    /// <value>
    ///   The parameters for the combined authentication request.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CombinedAuthenticateParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   A combined challenge result. This will contain a challenge for each of 
    ///   the types defined by AuthenticationTypeList, or selected based on 
    ///   policy and user availability if AuthenticationTypeList is left empty. 
    ///   Even if the user provided is invalid, or does not have one or more of 
    ///   the requested authentication types, or is restricted by policy from 
    ///   using them, a combined challenge will still be returned. When an 
    ///   attempt to authenticate such a challenge is made, failure will always be 
    ///   the result. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CombinedChallenge {
        
        private ChallengeRequestResult challengeRequestResultField;
        
        private RiskScoringResult riskScoringResultField;
        
        private AuthenticationType[] authenticationTypeListField;
        
        private PVNInfo pVNInfoField;
        
        private ChallengeSet gridChallengeField;
        
        private TokenChallenge tokenChallengeField;
        
        private OTPChallenge oTPChallengeField;
        
        private PasswordChallenge passwordChallengeField;
        
        private ExternalChallenge externalChallengeField;
        
        private string usernameField;
        
        private string groupField;
        
    /// <datatype>
    ///   ChallengeRequestResult
    /// </datatype>
    /// <value>
    ///   This value will indicate if the challenge request resulted in 
    ///   CHALLENGE (two or more challenge responses are required) or REJECT (the user 
    ///   is not allowed to authenticate). There is no concept of AUTHENTICATED 
    ///   with a combined challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ChallengeRequestResult challengeRequestResult {
            get {
                return this.challengeRequestResultField;
            }
            set {
                this.challengeRequestResultField = value;
            }
        }
        
    /// <datatype>
    ///   RiskScoringResult
    /// </datatype>
    /// <value>
    ///   If risk based authentication was performed, this value will be set and 
    ///   will indicate which parts of authentication passed or failed and why 
    ///   they failed. 
    ///   Risk based authentication is performed if either an IP address or 
    ///   external risk engine information is included with the challenge request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public RiskScoringResult riskScoringResult {
            get {
                return this.riskScoringResultField;
            }
            set {
                this.riskScoringResultField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The authentication types that are required to perform the combined 
    ///   authentication. One of these will always be EXTERNAL or PASSWORD. One of 
    ///   GRID, TOKENRO, or OTP will also be present. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthenticationTypeList {
            get {
                return this.authenticationTypeListField;
            }
            set {
                this.authenticationTypeListField = value;
            }
        }
        
    /// <datatype>
    ///   PVNInfo
    /// </datatype>
    /// <value>
    ///   Information about the personal verification number (PVN) for this 
    ///   challenge indicating if the PVN is required and/or available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PVNInfo PVNInfo {
            get {
                return this.pVNInfoField;
            }
            set {
                this.pVNInfoField = value;
            }
        }
        
    /// <datatype>
    ///   ChallengeSet
    /// </datatype>
    /// <value>
    ///   A Grid challenge. This will be non-null if, and only if, a required 
    ///   authentication type is GRID. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ChallengeSet GridChallenge {
            get {
                return this.gridChallengeField;
            }
            set {
                this.gridChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   TokenChallenge
    /// </datatype>
    /// <value>
    ///   A token challenge. This will be non-null if, and only if, a required 
    ///   authentication type is TOKENRO as TOKENCR is not supported for a 
    ///   combined challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenChallenge TokenChallenge {
            get {
                return this.tokenChallengeField;
            }
            set {
                this.tokenChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   OTPChallenge
    /// </datatype>
    /// <value>
    ///   An OTP challenge. This will be non-null if, and only if, a required 
    ///   authentication type is OTP. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public OTPChallenge OTPChallenge {
            get {
                return this.oTPChallengeField;
            }
            set {
                this.oTPChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordChallenge
    /// </datatype>
    /// <value>
    ///   A password challenge. This will be non-null if, and only if, a 
    ///   required authentication type is PASSWORD. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordChallenge PasswordChallenge {
            get {
                return this.passwordChallengeField;
            }
            set {
                this.passwordChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalChallenge
    /// </datatype>
    /// <value>
    ///   A challenge for an external authentication service.
    ///   This will be non-null if, and only if, a required authentication type 
    ///   is EXTERNAL. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalChallenge ExternalChallenge {
            get {
                return this.externalChallengeField;
            }
            set {
                this.externalChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
    }
    
    /// <summary>
    ///   This enumerated type defines the possible results of a challenge 
    ///   request when risk-based authentication is performed. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public enum ChallengeRequestResult {
        
    /// <value>
    ///   The challenge request was authenticated.
    ///   The results will not include a challenge and the application can 
    ///   proceed without further authentication. 
    /// </value>
        AUTHENTICATED,
        
    /// <value>
    ///   The challenge request was not authenticated.
    ///   The results will include a challenge and the application must 
    ///   authenticate that challenge before it proceeds. 
    /// </value>
        CHALLENGE,
        
    /// <value>
    ///   The challenge request was not authenticated.
    ///   The results do not include a challenge and the application can not 
    ///   proceed. 
    /// </value>
        REJECT,
    }
    
    /// <summary>
    ///   This structure includes details on the results of risk-based 
    ///   authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class RiskScoringResult {
        
        private System.Nullable<bool> iPAuthenticationPassedField;
        
        private IPAuthenticationStatus iPAuthenticationStatusField;
        
        private System.Nullable<bool> machineAuthenticationPassedField;
        
        private MachineAuthenticationStatus machineAuthenticationStatusField;
        
        private System.Nullable<bool> certificateAuthenticationPassedField;
        
        private CertificateAuthenticationStatus certificateAuthenticationStatusField;
        
        private ExternalRiskScoringReturn externalRiskScoringField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set, this value indicates if IP authentication passed or failed. If 
    ///   not set, IP authentication was not performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> IPAuthenticationPassed {
            get {
                return this.iPAuthenticationPassedField;
            }
            set {
                this.iPAuthenticationPassedField = value;
            }
        }
        
    /// <datatype>
    ///   IPAuthenticationStatus
    /// </datatype>
    /// <value>
    ///   If set, this structure indicates which parts of IP authentication 
    ///   failed. If not set, either IP authentication was not performed or it 
    ///   passed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPAuthenticationStatus IPAuthenticationStatus {
            get {
                return this.iPAuthenticationStatusField;
            }
            set {
                this.iPAuthenticationStatusField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set, this value indicates if machine authentication passed or 
    ///   failed. If not set, machine authentication was not performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> MachineAuthenticationPassed {
            get {
                return this.machineAuthenticationPassedField;
            }
            set {
                this.machineAuthenticationPassedField = value;
            }
        }
        
    /// <datatype>
    ///   MachineAuthenticationStatus
    /// </datatype>
    /// <value>
    ///   If set, this structure indicates why machine authentication failed. If 
    ///   not set, either machine authentication was not performed or it 
    ///   passed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineAuthenticationStatus MachineAuthenticationStatus {
            get {
                return this.machineAuthenticationStatusField;
            }
            set {
                this.machineAuthenticationStatusField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set, this value indicates if certificate authentication passed or 
    ///   failed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> CertificateAuthenticationPassed {
            get {
                return this.certificateAuthenticationPassedField;
            }
            set {
                this.certificateAuthenticationPassedField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateAuthenticationStatus
    /// </datatype>
    /// <value>
    ///   If set, this structure indicates why certificate authentication 
    ///   failed. If not set, either certificate authentication was not performed or 
    ///   it passed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateAuthenticationStatus CertificateAuthenticationStatus {
            get {
                return this.certificateAuthenticationStatusField;
            }
            set {
                this.certificateAuthenticationStatusField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoringReturn
    /// </datatype>
    /// <value>
    ///   If set, this value indicates that external risk scoring was performed 
    ///   as part of risk-based authentication and specifies the result of the 
    ///   check. If not set, external risk scoring was not performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoringReturn ExternalRiskScoring {
            get {
                return this.externalRiskScoringField;
            }
            set {
                this.externalRiskScoringField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure includes reasons explaining why IP authentication 
    ///   failed 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class IPAuthenticationStatus {
        
        private System.Nullable<bool> expectedLocationsField;
        
        private System.Nullable<bool> iPBlacklistField;
        
        private System.Nullable<bool> countryBlacklistField;
        
        private System.Nullable<bool> locationHistoryField;
        
        private System.Nullable<bool> velocityField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the location of the specified IP address was 
    ///   on the expected locations list. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> expectedLocations {
            get {
                return this.expectedLocationsField;
            }
            set {
                this.expectedLocationsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the specified IP address was not on the IP 
    ///   blacklist. If not set, this check was not performed. This check is not 
    ///   performed if the expectedLocation check passes. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> IPBlacklist {
            get {
                return this.iPBlacklistField;
            }
            set {
                this.iPBlacklistField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the country of the location of the specified 
    ///   IP address was not on the country blacklist. If not set, this check 
    ///   was not performed. This check is not performed if the expectedLocation 
    ///   check passes. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> countryBlacklist {
            get {
                return this.countryBlacklistField;
            }
            set {
                this.countryBlacklistField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the location of the specified IP address was 
    ///   on the user's user's location history. If not set, this check was not 
    ///   performed. This check is not performed if the expectedLocation check 
    ///   passes. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> locationHistory {
            get {
                return this.locationHistoryField;
            }
            set {
                this.locationHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the location of the specified IP address 
    ///   passed the velocity check with respect to locations on the user's location 
    ///   history. If not set, this check was not performed. 
    ///   This check is not performed if the checkVelocity policy is set to 
    ///   false or the maximum size of the user's location history is set to 0. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> velocity {
            get {
                return this.velocityField;
            }
            set {
                this.velocityField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure includes reasons explaining why machine authentication 
    ///   failed 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class MachineAuthenticationStatus {
        
        private bool machineNonceFailedField;
        
        private bool sequenceNonceFailedField;
        
        private bool appDataFailedField;
        
        private int numRequiredApplicationDataField;
        
        private int numFailedApplicationDataField;
        
        private bool secretExpiredField;
        
        private bool deviceFingerprintFailedField;
        
        private int deviceFingerprintRiskScoreField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the specified machine nonce didn't match any 
    ///   existing machine secrets, or the machine nonce was required and not 
    ///   specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool machineNonceFailed {
            get {
                return this.machineNonceFailedField;
            }
            set {
                this.machineNonceFailedField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the specified sequence nonce was invalid or 
    ///   the sequence nonce was required and not specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool sequenceNonceFailed {
            get {
                return this.sequenceNonceFailedField;
            }
            set {
                this.sequenceNonceFailedField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that the specified application data didn't match 
    ///   any existing machine secrets, or the application data was required and 
    ///   not specified. 
    ///   If application data was not used because a device fingerprint was 
    ///   used, this attribute will be false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool appDataFailed {
            get {
                return this.appDataFailedField;
            }
            set {
                this.appDataFailedField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of additional application data required.
    ///   Will be 0 if enough application data were provided.
    ///   If application data was not used because a device fingerprint was 
    ///   used, this attribute will be 0. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numRequiredApplicationData {
            get {
                return this.numRequiredApplicationDataField;
            }
            set {
                this.numRequiredApplicationDataField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   Will be 0 if no bad application data were provided or if bad 
    ///   application data were provided but did not exceed the number allowed by 
    ///   policy. 
    ///   If application data was not used because a device fingerprint was 
    ///   used, this attribute will be 0. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numFailedApplicationData {
            get {
                return this.numFailedApplicationDataField;
            }
            set {
                this.numFailedApplicationDataField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates the machine secret was expired.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool secretExpired {
            get {
                return this.secretExpiredField;
            }
            set {
                this.secretExpiredField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, indicates that a device fingerprint was provided and it 
    ///   failed authentication. A value of false indicates that either a device 
    ///   fingerprint wasn't provided or a device fingerprint was provided and 
    ///   passed validation. 
    ///   data didn't match any existing machine secrets, or the application 
    ///   data was required and not specified. 
    ///   If application data was not used because a device fingerprint was 
    ///   used, this attribute will be false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deviceFingerprintFailed {
            get {
                return this.deviceFingerprintFailedField;
            }
            set {
                this.deviceFingerprintFailedField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If a device fingerprint was validated, the calculated risk score 
    ///   between 0 and 100 will be returned in this attribute. If a device 
    ///   fingerprint wasn't validated, a value of 0 will be returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int deviceFingerprintRiskScore {
            get {
                return this.deviceFingerprintRiskScoreField;
            }
            set {
                this.deviceFingerprintRiskScoreField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure includes reasons explaining why certificate 
    ///   authentication failed 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CertificateAuthenticationStatus {
        
        private bool certificateRegisteredField;
        
        private bool certificateValidField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Indicates whether or not the specified certificate is registered for 
    ///   the user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool certificateRegistered {
            get {
                return this.certificateRegisteredField;
            }
            set {
                this.certificateRegisteredField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Indicates whether or not the specified certificate is valid. A valid 
    ///   certificate has not been revoked, is not expired, and has active 
    ///   state. 
    ///   If self-signed, the user policy must allow self-signed certificates to 
    ///   be registered against the user. If not self-signed and the CA that 
    ///   issued the certificate is not registered then non-registered CAs must 
    ///   be allowed by policy. 
    ///   If issued by a registered CA, that CA must be allowed by policy and 
    ///   must be in the ACTIVE state. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool certificateValid {
            get {
                return this.certificateValidField;
            }
            set {
                this.certificateValidField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure includes details on the results of external risk engine 
    ///   scoring. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class ExternalRiskScoringReturn {
        
        private ExternalRiskScoreResult externalRiskScoreStatusField;
        
        private System.Nullable<int> externalRiskScoreField;
        
        private string externalRiskEntityIdField;
        
        private NameValue[] externalRiskParametersField;
        
    /// <datatype>
    ///   ExternalRiskScoreResult
    /// </datatype>
    /// <value>
    ///   This value specifies the result of the external risk scoring check. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ExternalRiskScoreResult ExternalRiskScoreStatus {
            get {
                return this.externalRiskScoreStatusField;
            }
            set {
                this.externalRiskScoreStatusField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   This value is the risk score value returned by the external risk 
    ///   scoring check. 
    ///   If the external risk engine did run, or is not configured, this value 
    ///   will be null. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> ExternalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If set, this value indicates that external risk scoring returned an id 
    ///   for the entity that was scored; the ID is only meaningful to the 
    ///   external risk engine. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ExternalRiskEntityId {
            get {
                return this.externalRiskEntityIdField;
            }
            set {
                this.externalRiskEntityIdField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   An optional list of parameters returned from the external risk engine. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] ExternalRiskParameters {
            get {
                return this.externalRiskParametersField;
            }
            set {
                this.externalRiskParametersField = value;
            }
        }
    }
    
    /// <summary>
    ///   This enumerated type defines the possible results of an external risk 
    ///   score check. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum ExternalRiskScoreResult {
        
    /// <value>
    ///   The check passed.
    /// </value>
        PASS,
        
    /// <value>
    ///   The check failed.
    /// </value>
        FAIL,
        
    /// <value>
    ///   The check neither passed nor failed.
    /// </value>
        NEITHER,
    }
    
    /// <summary>
    ///   This structure contains information about the user's personal 
    ///   verification number (PVN). 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class PVNInfo {
        
        private bool requiredField;
        
        private System.Nullable<bool> availableField;
        
        private System.Nullable<bool> changeRequiredField;
        
        private int lengthField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application must include the user's personal verification 
    ///   number (PVN) with the authentication response. If the user does not 
    ///   have a PVN, they will be required to specify a new PVN when 
    ///   authenticating. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application may include the user's personal verification 
    ///   number (PVN) with the authentication response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> available {
            get {
                return this.availableField;
            }
            set {
                this.availableField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application must include a new personal verification 
    ///   number (PVN) in the authentication response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> changeRequired {
            get {
                return this.changeRequiredField;
            }
            set {
                this.changeRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The required length of a new personal verification number (PVN) as 
    ///   defined in policy. The current PVN may have a different length. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure defines the components returned as part of a grid 
    ///   challenge. It contains an array of Challenges which define the challenge 
    ///   the user must respond to, as well as additional data that describes 
    ///   the format of a valid challenge response. Note that the settings for 
    ///   what is a valid response are based on the most up-to-date policy 
    ///   settings, while the user's card may have been generated with older settings 
    ///   that mean the card is no longer valid according to the new ones. For 
    ///   example, if the user's card was generated with one character per 
    ///   cell, then the policy was changed to two characters per cell, the value 
    ///   in this structure for number of characters per cell would be two, 
    ///   even though the user's card only has one character per cell. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class ChallengeSet {
        
        private string cardCellAlphabetField;
        
        private int cardCellSizeField;
        
        private string[] cardSerialNumbersField;
        
        private bool hasCardsField;
        
        private Challenge[] challengeField;
        
        private string temporaryPinCellAlphabetField;
        
        private int temporaryPinCellSizeField;
        
        private int temporaryPinChallengeSizeField;
        
        private bool userHasTemporaryPinField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This string includes all the characters allowed in a challenge 
    ///   response. This does not include cell replacements, where, for example, the 
    ///   character 'l' may automatically be replaced by the digit '1' by the 
    ///   server. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string cardCellAlphabet {
            get {
                return this.cardCellAlphabetField;
            }
            set {
                this.cardCellAlphabetField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of characters in a single card cell.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int cardCellSize {
            get {
                return this.cardCellSizeField;
            }
            set {
                this.cardCellSizeField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The list of serial numbers of cards that the user could use to 
    ///   authenticate. This will be null if the system policy settings do not allow 
    ///   returning of this value, the user has a temporary PIN but no active 
    ///   cards or for anonymous authentication. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] cardSerialNumbers {
            get {
                return this.cardSerialNumbersField;
            }
            set {
                this.cardSerialNumbersField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This boolean flag indicates if the user has cards even if the card 
    ///   list is empty because the policy does not allow card information to be 
    ///   returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool hasCards {
            get {
                return this.hasCardsField;
            }
            set {
                this.hasCardsField = value;
            }
        }
        
    /// <datatype>
    ///   Challenge[]
    /// </datatype>
    /// <value>
    ///   An array of Challenge components. This is the challenge that the user 
    ///   must successfully answer. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public Challenge[] challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The characters allowed in a temporary PIN challenge response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string temporaryPinCellAlphabet {
            get {
                return this.temporaryPinCellAlphabetField;
            }
            set {
                this.temporaryPinCellAlphabetField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of characters in a temporary PIN cell.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int temporaryPinCellSize {
            get {
                return this.temporaryPinCellSizeField;
            }
            set {
                this.temporaryPinCellSizeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of cells in a temporary PIN challenge response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int temporaryPinChallengeSize {
            get {
                return this.temporaryPinChallengeSizeField;
            }
            set {
                this.temporaryPinChallengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the user currently has a temporary PIN assigned.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool userHasTemporaryPin {
            get {
                return this.userHasTemporaryPinField;
            }
            set {
                this.userHasTemporaryPinField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines a challenge component used for grid authentication.
    ///   A Challenge is a single row/column pair corresponding to a cell in an 
    ///   Entrust IdentityGuard card grid. Note that the indexing method used 
    ///   for cards is zero-based, so the row can be in the range 0 to (number 
    ///   of rows - 1), and the column can be in the range 0 to (number of 
    ///   columns - 1). 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class Challenge {
        
        private int rowField;
        
        private int columnField;
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The row.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Row {
            get {
                return this.rowField;
            }
            set {
                this.rowField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The column.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a token challenge.
    ///   For a TOKENRO challenge, this includes a list of tokens that can be 
    ///   used to authenticate the challenge. It may also include information 
    ///   about an online challenge. For a TOKENCR challenge, this also includes 
    ///   the token challenge value that must be entered into the token to 
    ///   generate the token response. 
    ///   The token challenge also includes information about the temporary PIN 
    ///   that can be used to respond to a token challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class TokenChallenge {
        
        private string challengeField;
        
        private TokenData[] tokensField;
        
        private bool hasTokensField;
        
        private System.Nullable<TokenTransactionMode> transactionModeField;
        
        private string transactionIdField;
        
        private System.Nullable<System.DateTime> createDateField;
        
        private System.Nullable<int> lifetimeField;
        
        private System.Nullable<bool> hasTemporaryPINField;
        
        private string temporaryPINCellAlphabetField;
        
        private System.Nullable<int> temporaryPINCellSizeField;
        
        private System.Nullable<int> temporaryPINChallengeSizeField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The token challenge. This value will only be set for TOKENCR 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   TokenData[]
    /// </datatype>
    /// <value>
    ///   The tokens that can be used to authenticate the challenge.
    ///   This list will not be present if the user's policy User Info In 
    ///   Challenge is set to false. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public TokenData[] tokens {
            get {
                return this.tokensField;
            }
            set {
                this.tokensField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This boolean flag indicates if the user has tokens even if the tokens 
    ///   list is empty. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool hasTokens {
            get {
                return this.hasTokensField;
            }
            set {
                this.hasTokensField = value;
            }
        }
        
    /// <datatype>
    ///   TokenTransactionMode
    /// </datatype>
    /// <value>
    ///   If a token transaction was requested, this value specifies the type of 
    ///   token transaction. If an online transaction was requested, it may 
    ///   have been downgraded to a classic transaction if the user has no tokens 
    ///   that support online transactions. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenTransactionMode> transactionMode {
            get {
                return this.transactionModeField;
            }
            set {
                this.transactionModeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The transaction id associated with this request.
    ///   This value will be set only when the challenge was delivered to one or 
    ///   more tokens using an online transaction. 
    ///   This transaction id should be specified in a subsequent 
    ///   authenticateGenericChallenge call when the application doesn't provide a response 
    ///   expected the response to be returned to Entrust IdentityGuard out of 
    ///   band. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   When an online transaction challenge is being performed this value 
    ///   will specify the time that this challenge was created. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<System.DateTime> CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   When an online transaction challenge is being performed this value 
    ///   will specify the lifetime of this challenge in seconds. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> Lifetime {
            get {
                return this.lifetimeField;
            }
            set {
                this.lifetimeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Flag indicating if user has a temporary PIN.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> hasTemporaryPIN {
            get {
                return this.hasTemporaryPINField;
            }
            set {
                this.hasTemporaryPINField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The characters allowed in a temporary PIN challenge response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string temporaryPINCellAlphabet {
            get {
                return this.temporaryPINCellAlphabetField;
            }
            set {
                this.temporaryPINCellAlphabetField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of characters in a temporary PIN cell.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> temporaryPINCellSize {
            get {
                return this.temporaryPINCellSizeField;
            }
            set {
                this.temporaryPINCellSizeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of cells in a temporary PIN challenge response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> temporaryPINChallengeSize {
            get {
                return this.temporaryPINChallengeSizeField;
            }
            set {
                this.temporaryPINChallengeSizeField = value;
            }
        }
    }
    
    /// <summary>
    ///   The token transaction mode specifies the type of transaction that is 
    ///   performed when a transaction is delivered to the Entrust IdentityGuard 
    ///   Mobile OTP application. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum TokenTransactionMode {
        
    /// <value>
    ///   A CLASSIC transaction is a transaction where the transaction is 
    ///   delivered to the mobile application which generates and displays a 
    ///   response. The response is manually entered into the customer application. 
    /// </value>
        CLASSIC,
        
    /// <value>
    ///   An ONLINE transaction is a transaction where the transaction is 
    ///   delivered to the mobile application which generates and automatically 
    ///   returns the response to Entrust IdentityGuard. The application is 
    ///   signalled when the response is ready. 
    /// </value>
        ONLINE,
        
    /// <value>
    ///   An OFFLINE transaction is a transaction where the transaction is 
    ///   encoded in an image which can be displayed by the customer application and 
    ///   then scanned into the Entrust IdentityGuard mobile application. The 
    ///   mobile application generates and displays a response which is 
    ///   manually entered into the mobile application. 
    /// </value>
        OFFLINE,
    }
    
    /// <summary>
    ///   This structure contains information about an OTP challenge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class OTPChallenge {
        
        private System.Nullable<bool> manualDeliveryRequiredField;
        
        private DeliveryMechanism[] deliveryMechanismUsedField;
        
        private DeliveryMechanism[] deliveryMechanismFailedField;
        
        private AuthenticationFault[] deliveryMechanismFailureReasonField;
        
        private DeliveryMechanism[] deliveryMechanismField;
        
        private bool dynamicRefreshField;
        
        private System.Nullable<bool> needsDeliveryForChallengeField;
        
        private System.Nullable<bool> needsDeliveryForAuthenticateField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application must retrieve and delivery the OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> manualDeliveryRequired {
            get {
                return this.manualDeliveryRequiredField;
            }
            set {
                this.manualDeliveryRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms that were used to 
    ///   successfully deliver the OTPs to the user. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismUsed {
            get {
                return this.deliveryMechanismUsedField;
            }
            set {
                this.deliveryMechanismUsedField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms that were used to 
    ///   deliver the OTP to the user where delivery failed. 
    ///   If this attribute is set, the deliveryMechanismFailureReason attribute 
    ///   will also be set with corresponding fault values providing the 
    ///   reason why each delivery failed. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismFailed {
            get {
                return this.deliveryMechanismFailedField;
            }
            set {
                this.deliveryMechanismFailedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the reason why each corresponding 
    ///   delivery mechanism specified in the deliveryMechanismFailed attribute failed 
    ///   to deliver OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationFault[] deliveryMechanismFailureReason {
            get {
                return this.deliveryMechanismFailureReasonField;
            }
            set {
                this.deliveryMechanismFailureReasonField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms available to 
    ///   deliver the user's OTPs. If the OTPs weren't already delivered the 
    ///   application should select delivery mechanisms from this list and request 
    ///   another challenge specifying which mechanisms to use. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanism {
            get {
                return this.deliveryMechanismField;
            }
            set {
                this.deliveryMechanismField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This flag indicates whether dynamic refresh is enabled or not. When 
    ///   dynamic refresh is enabled, OTPs are normally generated and delivered 
    ///   after authentication. When dynamic refresh is not enabled, OTPs are 
    ///   generated and delivered as part of getting the challenge. When dynamic 
    ///   refresh is enabled, OTPs will be generated and delivered during 
    ///   challenge if no OTPs exist. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool dynamicRefresh {
            get {
                return this.dynamicRefreshField;
            }
            set {
                this.dynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If dynamic refresh is enabled, this flag will be set to true if OTPs 
    ///   were generated during the challenge and were not delivered because the 
    ///   application did not specify delivery mechanisms. 
    ///   This is an indication to the application that even though dynamic 
    ///   refresh is enabled, the application should request another challenge 
    ///   specifying delivery mechanisms and requesting deliveryForDynamicRefresh 
    ///   as true in the challenge parameters. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> needsDeliveryForChallenge {
            get {
                return this.needsDeliveryForChallengeField;
            }
            set {
                this.needsDeliveryForChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If dynamic refresh is enabled, this flag will be set to true if OTPs 
    ///   will be generated during authentication because the user has reached 
    ///   the OTP refresh threshold. If this flag is set to true, the 
    ///   application should specify delivery mechanisms as parameters to the 
    ///   authentication request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> needsDeliveryForAuthenticate {
            get {
                return this.needsDeliveryForAuthenticateField;
            }
            set {
                this.needsDeliveryForAuthenticateField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a password challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class PasswordChallenge {
        
        private System.Nullable<bool> changeRequiredField;
        
        private System.DateTime expiryDateField;
        
        private System.DateTime allowChangeAfterDateField;
        
        private PasswordRules passwordRulesField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application must update the password when authenticating. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> changeRequired {
            get {
                return this.changeRequiredField;
            }
            set {
                this.changeRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The expiry date of the password used for authentication.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The date after which a user password change will be allowed.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime AllowChangeAfterDate {
            get {
                return this.allowChangeAfterDateField;
            }
            set {
                this.allowChangeAfterDateField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordRules
    /// </datatype>
    /// <value>
    ///   The password rules that a new password must follow.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordRules passwordRules {
            get {
                return this.passwordRulesField;
            }
            set {
                this.passwordRulesField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about an external challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class ExternalChallenge {
        
        private string challengeField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The challenge returned from the external authentication service. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
    }
    
    /// <summary>
    ///   Parameters for a combined challenge based on the PCI DSS requirements 
    ///   regarding multi-factor authentication. These parameters can be used 
    ///   to control the type of challenge returned. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CombinedChallengeParms {
        
        private System.Nullable<SecurityLevel> securityLevelField;
        
        private AuthenticationType[] authenticationTypeListField;
        
        private string applicationNameField;
        
        private System.Nullable<bool> requiresPVNField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private System.Nullable<int> gridChallengeSizeField;
        
        private string iPAddressField;
        
        private ExternalRiskScoreParms externalRiskScoreField;
        
        private System.Nullable<bool> useDefaultDeliveryField;
        
        private System.Nullable<bool> deliverForDynamicRefreshField;
        
        private System.Nullable<bool> onlySelectOTPAuthenticationIfDeliveryAvailableField;
        
        private System.Nullable<TokenTransactionMode> tokenTransactionModeField;
        
        private string tokenChallengeSummaryField;
        
        private string tokenDeliveryCallbackField;
        
        private System.Nullable<TokenProtectedOfflineOTPRestrictionType> tokenProtectedOfflineOTPRestrictionField;
        
        private string passwordNameField;
        
    /// <datatype>
    ///   SecurityLevel
    /// </datatype>
    /// <value>
    ///   The security level (normal or enhanced) indicating which policy will 
    ///   be used to choose the authenticators if AuthenticationTypeList is left 
    ///   empty. If not specified, it defaults to normal. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<SecurityLevel> SecurityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The list of authentication types associated with the combined 
    ///   challenge. 
    ///   If specified, one of PASSWORD or EXTERNAL must be present, in addition 
    ///   to one or more of GRID, TOKENRO, and OTP. If policy does not allow 
    ///   one or more of the provided authentication types, or the user does not 
    ///   have a valid authenticator of that type, a challenge will still be 
    ///   generated. 
    ///   However, any response to such a challenge is guaranteed to result in 
    ///   failure. 
    ///   If no values are specified, one of PASSWORD or EXTERNAL will be used 
    ///   (the first one allowed by policy and viable for the given user) in 
    ///   addition to one of GRID, TOKENRO, or OTP (the first one allowed by 
    ///   policy and viable for the given user). If neither PASSWORD nor EXTERNAL 
    ///   are allowed and viable, PASSWORD will be used as the first-factor part 
    ///   of the challenge. 
    ///   If none of GRID, TOKENRO, or OTP are allowed or viable, TOKENRO will 
    ///   be used as the second-factor part of the challenge. The same default 
    ///   first and second factor authenticators are also selected if the user 
    ///   is invalid. Attempting to answer a challenge that includes an 
    ///   authenticator that is not allowed by policy or is not viable for the 
    ///   specified user is guaranteed to result in failure. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthenticationTypeList {
            get {
                return this.authenticationTypeListField;
            }
            set {
                this.authenticationTypeListField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, this argument is the name of the application. This value 
    ///   will be included in any authentication audits so that the 
    ///   application performing the authentication can be tracked. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This argument is only used if the AuthenticationTypeList argument is 
    ///   left undefined/empty. 
    ///   If this argument is true, only second-factor authentication types that 
    ///   require a PVN are considered. If this argument is false, only 
    ///   second-factor authentication types that don't require a PVN are considered. 
    ///   If this argument is not set, all second-factor authentication types 
    ///   associated with a combined challenge (GRID, TOKENRO, OTP) are 
    ///   considered. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> RequiresPVN {
            get {
                return this.requiresPVNField;
            }
            set {
                this.requiresPVNField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this argument specifies a list of authentication types 
    ///   that require a PVN for this operation. The values in this list are 
    ///   combined with the list of authentication types specified in the 
    ///   authTypesRequiringPVN policy for this user. Any authentication types 
    ///   specified in this value must be authentication types that support PVN and can 
    ///   be used with a combined challenge. 
    ///   An application can use this argument to require a PVN for an 
    ///   authentication type where the PVN is not required by the policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for GRID challenges. If specified, it defines the 
    ///   number of cells to ask for a GRID challenge. The specified value must 
    ///   be within the range allowed by policy. 
    ///   If this value is specified, and the user does not use a GRID 
    ///   challenge, then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> GridChallengeSize {
            get {
                return this.gridChallengeSizeField;
            }
            set {
                this.gridChallengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If set, this value contains the IP address that will be authenticated 
    ///   as part of this request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoreParms
    /// </datatype>
    /// <value>
    ///   Parameters used to perform an external risk score check as part of 
    ///   risk-based authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoreParms externalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the user's default OTP OOB delivery mechanism will be used to 
    ///   deliver OTPs. 
    ///   If useDefaultDelivery is not specified and an OTP challenge is 
    ///   returned, the OTPs will be delivered to all available delivery destinations, 
    ///   if any. This will also be the case if a given user does not have a 
    ///   default contact info entry when this option is true or it is not 
    ///   associated with a valid delivery mechanism. 
    ///   This approach is to prevent the need to specify one or more 
    ///   user-specific contact info labels in cases where the setting of a default 
    ///   contact info entry for users is not mandatory. This is not the same 
    ///   behavior as getGenericChallenge where a list of contact info entries must 
    ///   be provided if useDefaultDelivery is false. If delivery is not 
    ///   possible for any reason, then a manual OTP challenge will be returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> useDefaultDelivery {
            get {
                return this.useDefaultDeliveryField;
            }
            set {
                this.useDefaultDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the user's OTPs will be delivered when OTP dynamic refresh is 
    ///   enabled. Normally, when OTP dynamic refresh is enabled, the user's 
    ///   OTPs would be delivered as part of authentication. 
    ///   For OTPs to be delivered, the application can still specify the 
    ///   contact to use for delivery via the useDefaultDelivery. If that value is 
    ///   false or not provided, or the user doesn't have a default contact info 
    ///   entry (or one that supports delivery), then delivery to all possible 
    ///   contact info entries will be made. This is not the same behavior as 
    ///   getGenericChallenge where a list of contact info entries must be 
    ///   provided if useDefaultDelivery is false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> deliverForDynamicRefresh {
            get {
                return this.deliverForDynamicRefreshField;
            }
            set {
                this.deliverForDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, Entrust IdentityGuard will only consider OTP authentication 
    ///   if OTP delivery is enabled for the user and the user has a usable 
    ///   delivery mechanism configured. This is only applicable when 
    ///   AuthenticationTypeList is not specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> onlySelectOTPAuthenticationIfDeliveryAvailable {
            get {
                return this.onlySelectOTPAuthenticationIfDeliveryAvailableField;
            }
            set {
                this.onlySelectOTPAuthenticationIfDeliveryAvailableField = value;
            }
        }
        
    /// <datatype>
    ///   TokenTransactionMode
    /// </datatype>
    /// <value>
    ///   The token transaction mode specifies the type of transaction that is 
    ///   performed. 
    ///   If not specified, this value is ignored and standard token 
    ///   authentication takes place. 
    ///   Note that a combined challenge does not support OFFLINE mode with QR 
    ///   codes. The valid choices are CLASSIC and ONLINE. If ONLINE is chosen, 
    ///   fallback to CLASSIC automatically takes place if ONLINE is not 
    ///   possible for any reason. This is not the same behavior as 
    ///   getGenericChallenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenTransactionMode> tokenTransactionMode {
            get {
                return this.tokenTransactionModeField;
            }
            set {
                this.tokenTransactionModeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When delivering a challenge to a token using an ONLINE transaction, 
    ///   the challenge summary, if defined, specifies text that will be 
    ///   displayed to the user in the mobile soft token application. 
    ///   The application can use this attribute to describe to the user the 
    ///   purpose of the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenChallengeSummary {
            get {
                return this.tokenChallengeSummaryField;
            }
            set {
                this.tokenChallengeSummaryField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The token delivery callback argument can optionally specify a URL. 
    ///   If a token challenge is delivered to tokens using an ONLINE 
    ///   transaction and the callback URL is specified, a message will be delivered to 
    ///   the URL when the response for the challenge is received by Entrust 
    ///   IdentityGuard. If the URL contains the token &lt;STATUS&gt; it will be 
    ///   replaced with the value CONFIRM, CONCERN or CANCEL indicating the 
    ///   status of the transaction. 
    ///   If the URL contains the token &lt;TRANSACTIONID&gt; it will be 
    ///   replaced with the transaction Id of the transaction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenDeliveryCallback {
            get {
                return this.tokenDeliveryCallbackField;
            }
            set {
                this.tokenDeliveryCallbackField = value;
            }
        }
        
    /// <datatype>
    ///   TokenProtectedOfflineOTPRestrictionType
    /// </datatype>
    /// <value>
    ///   If this attribute is provided, it restricts the selection of tokens to 
    ///   those which meet the criteria. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenProtectedOfflineOTPRestrictionType> TokenProtectedOfflineOTPRestriction {
            get {
                return this.tokenProtectedOfflineOTPRestrictionField;
            }
            set {
                this.tokenProtectedOfflineOTPRestrictionField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the password to use when generating a password challenge. 
    ///   If not specified, the user's default password is used. If the named 
    ///   password does not exist, an error is returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string passwordName {
            get {
                return this.passwordNameField;
            }
            set {
                this.passwordNameField = value;
            }
        }
    }
    
    /// <summary>
    ///   This enumerated type defines options for selecting only those tokens 
    ///   which support protected offline OTP generation. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public enum TokenProtectedOfflineOTPRestrictionType {
        
    /// <value>
    ///   Only consider a user's tokens if the user is managed by a policy which 
    ///   support protected offline OTP generation. 
    /// </value>
        REQUIRED,
        
    /// <value>
    ///   Only consider a user's tokens if the user is managed by a policy which 
    ///   support protected offline OTP generation, and the user has a PVN. 
    /// </value>
        REQUIRED_WITH_PVN,
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getCombinedChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetCombinedChallengeCallParms {
        
        private string userIdField;
        
        private CombinedChallengeParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user for which to retrieve challenges.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   CombinedChallengeParms
    /// </datatype>
    /// <value>
    ///   Parameters used to construct the combined challenge.
    ///   This can be used to specify the type of challenges returned.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CombinedChallengeParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a token that can be used to 
    ///   authenticate. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class TokenDataEx {
        
        private string vendorIdField;
        
        private string serialNumberField;
        
        private string tokenSetField;
        
        private bool supportsDataSignatureField;
        
        private bool supportsMutualAuthenticationField;
        
        private bool supportsDeliveryAndSignatureField;
        
        private bool supportsOnlineTransactionsField;
        
        private bool supportsOfflineTransactionsField;
        
        private DeliveryStatus deliveryStatusField;
        
        private string offlineChallengeField;
        
        private byte[] offlineChallengeQRCodeField;
        
        private string tokenCREncodedChallengeField;
        
        private byte[] tokenCRChallengeQRCodeField;
        
        private string mutualAuthenticationResponseField;
        
        private byte[] offlineOTPPVNUseSecretField;
        
        private System.Nullable<bool> offlineOTPPVNProtectedField;
        
        private System.Nullable<bool> offlineOTPPVNChangedField;
        
        private System.Nullable<long> offlineOTPFirstMovingFactorField;
        
        private System.Nullable<int> offlineOTPTimeIntervalField;
        
        private System.Nullable<int> offlineOTPTimeDriftField;
        
        private System.Nullable<int> offlineOTPMaxTimeStepsField;
        
        private System.Nullable<int> offlineOTPMinorCountField;
        
        private System.Nullable<int> offlineOTPMaxCountField;
        
        private System.Nullable<int> offlineOTPPrivateSaltLengthField;
        
        private System.Nullable<int> offlineOTPIterationsField;
        
        private string offlineOTPItemsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This value will contain the name of the token vendor if defined. 
    ///   Otherwise, this value will contain the vendor id of the token. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The serial number of the token.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The set of the token.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TokenSet {
            get {
                return this.tokenSetField;
            }
            set {
                this.tokenSetField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports the data signature operation. 
    ///   Note that a value of true does not indicate if the user's policy 
    ///   allows the data signature operation to be performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsDataSignature {
            get {
                return this.supportsDataSignatureField;
            }
            set {
                this.supportsDataSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports mutual authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsMutualAuthentication {
            get {
                return this.supportsMutualAuthenticationField;
            }
            set {
                this.supportsMutualAuthenticationField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports the delivery and signature 
    ///   operation where Entrust IdentityGuard delivers transaction details to 
    ///   the user's token where they are used to calculate the token response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsDeliveryAndSignature {
            get {
                return this.supportsDeliveryAndSignatureField;
            }
            set {
                this.supportsDeliveryAndSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this token supports online transactions
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsOnlineTransactions {
            get {
                return this.supportsOnlineTransactionsField;
            }
            set {
                this.supportsOnlineTransactionsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if the vendor of this token supports offline 
    ///   transactions. Since a token using offline transactions may not have network 
    ///   connectivity, we can't rely on the token having connected to 
    ///   IdentityGuard to register with IdentityGuard whether it supports offline 
    ///   transactions or not. Therefore, we base the setting of this flag on 
    ///   whether the vendor can support offline transactions. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SupportsOfflineTransactions {
            get {
                return this.supportsOfflineTransactionsField;
            }
            set {
                this.supportsOfflineTransactionsField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryStatus
    /// </datatype>
    /// <value>
    ///   A value indicating if transaction details were delivered as part of 
    ///   generating the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DeliveryStatus DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When an offline transaction challenge is being requested this value 
    ///   will specify the offline transaction challenge value. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string OfflineChallenge {
            get {
                return this.offlineChallengeField;
            }
            set {
                this.offlineChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   When an offline transaction challenge is being requested this value 
    ///   will specify the offline transaction challenge encoded as a QR code. 
    ///   This value should be displayed by the application so that it can be 
    ///   scanned by the Entrust IdentityGuard mobile application. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] OfflineChallengeQRCode {
            get {
                return this.offlineChallengeQRCodeField;
            }
            set {
                this.offlineChallengeQRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When a token CR challenge has been generated and encoded as a QR code, 
    ///   this value will specify the challenge value encoded into the QR code 
    ///   if available from the token vendor. For some token vendors, this 
    ///   value may be a URL that can be used by the application. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TokenCREncodedChallenge {
            get {
                return this.tokenCREncodedChallengeField;
            }
            set {
                this.tokenCREncodedChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   When a token CR challenge has been generated and encoded as a QR code, 
    ///   this value will specify the QR code value. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] TokenCRChallengeQRCode {
            get {
                return this.tokenCRChallengeQRCodeField;
            }
            set {
                this.tokenCRChallengeQRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this value is being returned as part of a mutual authentication 
    ///   challenge this attribute includes the mutual authentication response for 
    ///   this token. Otherwise this value will be null. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string MutualAuthenticationResponse {
            get {
                return this.mutualAuthenticationResponseField;
            }
            set {
                this.mutualAuthenticationResponseField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   If set, the client must use this secret for all future requests for 
    ///   protected offline OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] OfflineOTPPVNUseSecret {
            get {
                return this.offlineOTPPVNUseSecretField;
            }
            set {
                this.offlineOTPPVNUseSecretField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag that indicates if the OTP hashes are protected using the user's 
    ///   PVN. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OfflineOTPPVNProtected {
            get {
                return this.offlineOTPPVNProtectedField;
            }
            set {
                this.offlineOTPPVNProtectedField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag that indicates if the user's PVN has changed or been added or 
    ///   deleted since the last time a request for offline OTPs was made. This 
    ///   is only meaningful if OTPs are included in this response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OfflineOTPPVNChanged {
            get {
                return this.offlineOTPPVNChangedField;
            }
            set {
                this.offlineOTPPVNChangedField = value;
            }
        }
        
    /// <datatype>
    ///   long
    /// </datatype>
    /// <value>
    ///   Indicates the moving factor of the first offline OTP returned in this 
    ///   response. This is only meaningful if OTPs are included in this 
    ///   response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<long> OfflineOTPFirstMovingFactor {
            get {
                return this.offlineOTPFirstMovingFactorField;
            }
            set {
                this.offlineOTPFirstMovingFactorField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   Indicates the OTP time refresh interval (in seconds) for TOTP tokens. 
    ///   This is only meaningful if OTPs are included in this response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPTimeInterval {
            get {
                return this.offlineOTPTimeIntervalField;
            }
            set {
                this.offlineOTPTimeIntervalField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The amount of time drift (in seconds) for TOTP tokens. This is only 
    ///   meaningful if OTPs are included in this response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPTimeDrift {
            get {
                return this.offlineOTPTimeDriftField;
            }
            set {
                this.offlineOTPTimeDriftField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The max. number of time steps allowed when validating OTP responses 
    ///   for TOTP tokens. This is only meaningful if OTPs are included in this 
    ///   response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPMaxTimeSteps {
            get {
                return this.offlineOTPMaxTimeStepsField;
            }
            set {
                this.offlineOTPMaxTimeStepsField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If OTP download is supported by this token, this indicates the 
    ///   recommended minimum number of hours' worth of OTPs that should be downloaded 
    ///   by a client as configured by policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPMinorCount {
            get {
                return this.offlineOTPMinorCountField;
            }
            set {
                this.offlineOTPMinorCountField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   If OTP download is supported by this token, this indicates the maximum 
    ///   number of hours' worth of OTPs that can be downloaded by a client as 
    ///   configured by policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPMaxCount {
            get {
                return this.offlineOTPMaxCountField;
            }
            set {
                this.offlineOTPMaxCountField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   This value is the length of the private salt used to hash the OTP 
    ///   response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPPrivateSaltLength {
            get {
                return this.offlineOTPPrivateSaltLengthField;
            }
            set {
                this.offlineOTPPrivateSaltLengthField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   This value is the number of iterations of the hash function to be 
    ///   performed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> OfflineOTPIterations {
            get {
                return this.offlineOTPIterationsField;
            }
            set {
                this.offlineOTPIterationsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string OfflineOTPItems {
            get {
                return this.offlineOTPItemsField;
            }
            set {
                this.offlineOTPItemsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure defines the data returned after a successful generic 
    ///   challenge authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericAuthenticateExResponse {
        
        private CardData cardInfoField;
        
        private TokenDataEx tokenInfoField;
        
        private PasswordInfo passwordInfoField;
        
        private CertificateData certificateInfoField;
        
        private SmartCredentialData smartCredentialInfoField;
        
        private BiometricData biometricInfoField;
        
        private NameValue[] authenticationSecretsField;
        
        private SharedSecret[] sharedSecretsField;
        
        private AuthenticationFault warningFaultField;
        
        private MachineSecret machineSecretField;
        
        private IPLocation iPLocationField;
        
        private CertificateData certificateRegisteredField;
        
        private AuthenticationType[] challengeHistoryField;
        
        private sbyte[] mSCHAPV2AuthenticatorResponseField;
        
        private TransactionReceiptInfo transactionReceiptInfoField;
        
        private DeliveryMechanism[] deliveryMechanismUsedField;
        
        private DeliveryMechanism[] deliveryMechanismFailedField;
        
        private AuthenticationFault[] deliveryMechanismFailureReasonField;
        
        private System.Nullable<bool> oTPDynamicRefreshField;
        
        private System.Nullable<bool> oTPNewGeneratedField;
        
        private string groupField;
        
        private string userNameField;
        
        private string fullNameField;
        
        private AuthenticationInfo lastAuthField;
        
        private AuthenticationInfo lastFailedAuthField;
        
        private NameValues[] retrievedRepositoryAttributesField;
        
        private string[] accessGroupsField;
        
    /// <datatype>
    ///   CardData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the card used during 
    ///   authentication. It will be null if a card was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CardData cardInfo {
            get {
                return this.cardInfoField;
            }
            set {
                this.cardInfoField = value;
            }
        }
        
    /// <datatype>
    ///   TokenDataEx
    /// </datatype>
    /// <value>
    ///   This structure contains information about the token used during 
    ///   authentication. It will be null if a token was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenDataEx tokenInfo {
            get {
                return this.tokenInfoField;
            }
            set {
                this.tokenInfoField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordInfo
    /// </datatype>
    /// <value>
    ///   This structure contains information about the password used during 
    ///   authentication. It will be null if a password was not used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordInfo PasswordInfo {
            get {
                return this.passwordInfoField;
            }
            set {
                this.passwordInfoField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the certificate used to 
    ///   validate the response. It will be null if certificate authentication was 
    ///   not used for authentication or a smart credential was used to 
    ///   authenticate the response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData certificateInfo {
            get {
                return this.certificateInfoField;
            }
            set {
                this.certificateInfoField = value;
            }
        }
        
    /// <datatype>
    ///   SmartCredentialData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the smart credential used to 
    ///   validate the response. 
    ///   It will be null if certificate authentication was not used for 
    ///   authentication or an unmanaged certificate was used to authenticate the 
    ///   response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SmartCredentialData smartCredentialInfo {
            get {
                return this.smartCredentialInfoField;
            }
            set {
                this.smartCredentialInfoField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the biometric used to 
    ///   validate the response. 
    ///   It will be null if biometric authentication was not used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricData biometricInfo {
            get {
                return this.biometricInfoField;
            }
            set {
                this.biometricInfoField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   A list of authentication secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included 
    ///   authentication secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] AuthenticationSecrets {
            get {
                return this.authenticationSecretsField;
            }
            set {
                this.authenticationSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   An array of Shared Secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included shared 
    ///   secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SharedSecrets {
            get {
                return this.sharedSecretsField;
            }
            set {
                this.sharedSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   A fault indicating that an error occurred updating authentication or 
    ///   shared secrets but the response was successfully authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault WarningFault {
            get {
                return this.warningFaultField;
            }
            set {
                this.warningFaultField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   If the request included a machine secret or a request to register a 
    ///   new machine secret, this attribute will include the new or updated 
    ///   machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   IPLocation
    /// </datatype>
    /// <value>
    ///   If the request included an IP address to be registered, this attribute 
    ///   will include the location of that IP address. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPLocation IPLocation {
            get {
                return this.iPLocationField;
            }
            set {
                this.iPLocationField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   If a new certificate was registered during this request, this value 
    ///   will include information about that certificate. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData certificateRegistered {
            get {
                return this.certificateRegisteredField;
            }
            set {
                this.certificateRegisteredField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   A list of authentication types whose challenges have been 
    ///   authenticated. The value returned in this attribute will consist of the list 
    ///   passed to this request plus the authentication type authenticated in this 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] ChallengeHistory {
            get {
                return this.challengeHistoryField;
            }
            set {
                this.challengeHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   If MS-CHAPv2 authentication was used, this value will include the 
    ///   MS-CHAPV2 authenticator response value. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] MSCHAPV2AuthenticatorResponse {
            get {
                return this.mSCHAPV2AuthenticatorResponseField;
            }
            set {
                this.mSCHAPV2AuthenticatorResponseField = value;
            }
        }
        
    /// <datatype>
    ///   TransactionReceiptInfo
    /// </datatype>
    /// <value>
    ///   If this value is specified, it will contain the transaction receipt 
    ///   and information describing how it was signed. This value will only be 
    ///   specified if transaction details were included in the authentication 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TransactionReceiptInfo transactionReceiptInfo {
            get {
                return this.transactionReceiptInfoField;
            }
            set {
                this.transactionReceiptInfoField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs were successfully delivered during the authentication, this 
    ///   attribute will specify the delivery mechanisms that were used to 
    ///   successfully deliver the OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismUsed {
            get {
                return this.deliveryMechanismUsedField;
            }
            set {
                this.deliveryMechanismUsedField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs failed delivery during the authentication, this attribute will 
    ///   specify the delivery mechanisms that failed delivery. The 
    ///   deliveryMechanismFailureReason attribute will have a corresponding entry 
    ///   describing why delivery failed. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismFailed {
            get {
                return this.deliveryMechanismFailedField;
            }
            set {
                this.deliveryMechanismFailedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the reason why each corresponding 
    ///   delivery mechanism specified in the deliveryMechanismFailed attribute failed 
    ///   to deliver OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationFault[] deliveryMechanismFailureReason {
            get {
                return this.deliveryMechanismFailureReasonField;
            }
            set {
                this.deliveryMechanismFailureReasonField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication performed.
    ///   This flag will indicate if OTP dynamic refresh was enabled or not. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPDynamicRefresh {
            get {
                return this.oTPDynamicRefreshField;
            }
            set {
                this.oTPDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication was performed and OTP dynamic 
    ///   refresh is enabled. This flag will indicate if new OTPs were generated as 
    ///   part of this authentication. If OTPs were generated and not delivered 
    ///   (as indicated by the deliveryMechanismUsed attribute) then the 
    ///   application may be required to deliver the OTPs directly using the 
    ///   administration API to retrieve the OTP values. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPNewGenerated {
            get {
                return this.oTPNewGeneratedField;
            }
            set {
                this.oTPNewGeneratedField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The full name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationInfo
    /// </datatype>
    /// <value>
    ///   Information about the last successful authentication for this user 
    ///   prior to this one. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationInfo lastAuth {
            get {
                return this.lastAuthField;
            }
            set {
                this.lastAuthField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationInfo
    /// </datatype>
    /// <value>
    ///   Information about the last failed authentication for this user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationInfo lastFailedAuth {
            get {
                return this.lastFailedAuthField;
            }
            set {
                this.lastFailedAuthField = value;
            }
        }
        
    /// <datatype>
    ///   NameValues[]
    /// </datatype>
    /// <value>
    ///   A list of attribute values that were searched for based on the 
    ///   attribute names provided within the retrieveRepositoryAttributes member of 
    ///   the GenericAuthenticateParms object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValues[] retrievedRepositoryAttributes {
            get {
                return this.retrievedRepositoryAttributesField;
            }
            set {
                this.retrievedRepositoryAttributesField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The access groups associated with this user.
    ///   The access groups may be based on policy or may be specific to the 
    ///   user based on the user access group override policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] AccessGroups {
            get {
                return this.accessGroupsField;
            }
            set {
                this.accessGroupsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a certificate that can be 
    ///   used to authenticate a certificate challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class CertificateData {
        
        private string issuerDNField;
        
        private string subjectDNField;
        
        private string serialNumberField;
        
        private System.DateTime issueDateField;
        
        private System.DateTime expiryDateField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The issuer DN of the certificate
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IssuerDN {
            get {
                return this.issuerDNField;
            }
            set {
                this.issuerDNField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The subject DN of the certificate
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SubjectDN {
            get {
                return this.subjectDNField;
            }
            set {
                this.subjectDNField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The serial number of the certificate.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The issue date of the certificate.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The expiry date of the certificate.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a smart credential that can 
    ///   be used to authenticate a certificate challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class SmartCredentialData {
        
        private string smartCredentialIdField;
        
        private string friendlyNameField;
        
        private bool supportsSecurityChallengeField;
        
        private bool mobileField;
        
        private bool registeredField;
        
        private string[] registeredApplicationsField;
        
        private DeliveryStatus deliveryStatusField;
        
        private string responseField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The Id of the smart credential.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SmartCredentialId {
            get {
                return this.smartCredentialIdField;
            }
            set {
                this.smartCredentialIdField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The optional friendly name of the smart credential.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FriendlyName {
            get {
                return this.friendlyNameField;
            }
            set {
                this.friendlyNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this smart credential supports delivery security 
    ///   challenges. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool supportsSecurityChallenge {
            get {
                return this.supportsSecurityChallengeField;
            }
            set {
                this.supportsSecurityChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this smart credential is mobile or not.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool mobile {
            get {
                return this.mobileField;
            }
            set {
                this.mobileField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating if this smart credential is registered or not. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool registered {
            get {
                return this.registeredField;
            }
            set {
                this.registeredField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The applications that are registered to this smart credential. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] registeredApplications {
            get {
                return this.registeredApplicationsField;
            }
            set {
                this.registeredApplicationsField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryStatus
    /// </datatype>
    /// <value>
    ///   A value indicating if the certificate challenge and/or transaction 
    ///   details were delivered as part of generating the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DeliveryStatus DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When included in the authenticateGenericChallenge response this value 
    ///   will include the base-64 encoded signed challenge response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string Response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a biometric that can be used 
    ///   to authenticate. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class BiometricData {
        
        private string vendorIdField;
        
        private BiometricType typeField;
        
        private string vendorManufacturerField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This value will contain the name of the biometric vendor if defined. 
    ///   Otherwise, this value will contain the vendor id. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricType
    /// </datatype>
    /// <value>
    ///   The type of the biometric.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BiometricType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This value will contain the manufacturer of the biometric vendor. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VendorManufacturer {
            get {
                return this.vendorManufacturerField;
            }
            set {
                this.vendorManufacturerField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines the supported biometric types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum BiometricType {
        
    /// <value>
    ///   Biometrics using the user's fingerprints.
    /// </value>
        FINGERPRINT,
        
    /// <value>
    ///   Biometrics using the user's face.
    /// </value>
        FACE,
        
    /// <value>
    ///   Biometrics using the user's voice.
    /// </value>
        VOICE,
        
    /// <value>
    ///   Biometrics using the user's iris.
    /// </value>
        IRIS,
    }
    
    /// <summary>
    ///   A machine secret. A machine secret stores registration information 
    ///   about a particular computer or device. These secrets are stored by the 
    ///   Entrust IdentityGuard Server, and if getGenericChallenge is given a 
    ///   machine secret that was previously registered, the authentication step 
    ///   can be skipped. This means that to be useful, the machine secret must 
    ///   be stored by the calling application on the user's computer, for 
    ///   example in a cookie in a Web browser. 
    ///   <p>
    ///   Machine secrets have a lifetime defined by the server's policy, and 
    ///   become invalid if they are not used within that lifetime. 
    ///   </p>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class MachineSecret {
        
        private string machineLabelField;
        
        private string machineNonceField;
        
        private string sequenceNonceField;
        
        private NameValue[] applicationDataField;
        
        private string deviceFingerprintField;
        
        private string machineExternalIdField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   An optional label value provided by the application. The application 
    ///   can set this value if they want to display a meaningful name for the 
    ///   machine secret to the end user and administrators. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string machineLabel {
            get {
                return this.machineLabelField;
            }
            set {
                this.machineLabelField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   A nonce value generated when the machine is registered. When 
    ///   registering a new machine using authenticateGenericChallenge, this value can 
    ///   be set by the calling application, or it can be left as null (in which 
    ///   case the server will generate a random value). When checking if a 
    ///   machine is registered using getGenericChallenge, this value must be set 
    ///   to the value returned when the machine was registered. If the 
    ///   machine has not previously been registered, this value should be left as 
    ///   null. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string machineNonce {
            get {
                return this.machineNonceField;
            }
            set {
                this.machineNonceField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   A nonce value generated each time the machine registration is checked. 
    ///   When checking if a machine is registered, this value can be provided 
    ///   to prevent older versions of the machine secret being reused. This 
    ///   can prevent someone with an older version of the machine secret 
    ///   gaining access to the user's account. 
    ///   <p>
    ///   It is good practice to supply this value when checking if a machine is 
    ///   registered, but it is only required if the server policy indicates 
    ///   it must be included. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string sequenceNonce {
            get {
                return this.sequenceNonceField;
            }
            set {
                this.sequenceNonceField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   Data included in the machine secret by the application. This 
    ///   additional data can be supplied when registering a machine, then future checks 
    ///   can include it to make sure the user is using the same machine. For 
    ///   example, it could include the IP address of the machine. 
    ///   <p>
    ///    This information is never returned by the server.
    ///   </p>
    ///   <p>
    ///   By default, this information is not required, but the server policy 
    ///   can be changed to require that a minimum number of data be supplied 
    ///   when checking if a machine is registered. 
    ///   </p>
    ///   <p>
    ///   When comparing application data, the IdentityGuard server uses an 
    ///   exact match against previously stored application data. It does not use 
    ///   the new device attribute policy added in 11.0. 
    ///   </p>
    ///   <p>
    ///   Customer's who have applications using application data are strongly 
    ///   encouraged to update their applications to use device fingerprints 
    ///   instead. 
    ///   Support for application data may be removed in a future version of 
    ///   Entrust IdentityGuard. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] applicationData {
            get {
                return this.applicationDataField;
            }
            set {
                this.applicationDataField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   Data included in the machine secret by the application. The device 
    ///   fingerprint is a JSON encoded string and is normally collected by 
    ///   applications using the Entrust IdentityGuard Device Fingerprint SDK. 
    ///   when registering a machine, then future checks can include it to make 
    ///   sure the user is using the same machine. For example, it could 
    ///   include the IP address of the machine. 
    ///   <p>
    ///    This information is never returned by the server.
    ///   </p>
    ///   <p>
    ///   When comparing device fingerprint data, the IdentityGuard server uses 
    ///   device attribute policy to determine if attributes match. 
    ///   </p>
    ///   <p>
    ///   Normally, a machine secret will not include both attribute data and 
    ///   device fingerprint data. 
    ///   However, if an application has been updated to start using the device 
    ///   fingerprint SDK, it may wish to include both types of data to 
    ///   facilitate upgrading a user's machine secrets. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string deviceFingerprint {
            get {
                return this.deviceFingerprintField;
            }
            set {
                this.deviceFingerprintField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this machine has a representation in an external service, and that 
    ///   service provides its own ID for the machine, this is where it can be 
    ///   stored. 
    ///   <p>
    ///   This value is entirely independent of any matching done on any of the 
    ///   other fields in the machine secret. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string machineExternalId {
            get {
                return this.machineExternalIdField;
            }
            set {
                this.machineExternalIdField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure defines the information returned for a transaction 
    ///   receipt. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class TransactionReceiptInfo {
        
        private TransactionSignatureType transactionSignatureTypeField;
        
        private string transactionReceiptField;
        
        private AuthenticationFault transactionSignatureFaultField;
        
    /// <datatype>
    ///   TransactionSignatureType
    /// </datatype>
    /// <value>
    ///   This value defines how the transaction receipt is signed. The 
    ///   signature can be one of NONE (not signed), XML (signed using XML digital 
    ///   signature) or SMIME (signed using SMIME digital signature). 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TransactionSignatureType transactionSignatureType {
            get {
                return this.transactionSignatureTypeField;
            }
            set {
                this.transactionSignatureTypeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   This value is the transaction receipt.
    ///   If the transaction signature type is NONE this value will contain an 
    ///   XML document consisting of the transaction receipt. If the transaction 
    ///   signature type is XML this value will contain an XML document 
    ///   consisting of the transaction receipt and XML digital signature. If the 
    ///   transaction signature type is SMIME this value will contain a BASE-64 
    ///   encoded SMIME signature value including the XML transaction receipt and 
    ///   the signature. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string transactionReceipt {
            get {
                return this.transactionReceiptField;
            }
            set {
                this.transactionReceiptField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   If Entrust IdentityGuard policy specified that the transaction receipt 
    ///   should be signed and for some reason the receipt could not be 
    ///   signed, it will be returned as an unsigned receipt and this value will 
    ///   contain a fault value indicating why the signature could not be 
    ///   generated. Likely reasons are that no active transaction certificate is 
    ///   available or the transaction certificate has expired. If the transaction 
    ///   receipt was signed (or not signed) according to policy, this value will 
    ///   not be set. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault transactionSignatureFault {
            get {
                return this.transactionSignatureFaultField;
            }
            set {
                this.transactionSignatureFaultField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines the possible ways in which a transaction receipt can be 
    ///   signed. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public enum TransactionSignatureType {
        
    /// <value>
    ///   Indicates that transaction receipts are not signed.
    /// </value>
        NONE,
        
    /// <value>
    ///   Indicates that transaction receipts are signed using XML digital 
    ///   signatures. 
    /// </value>
        XML,
        
    /// <value>
    ///   Indicates that transaction receipts are signed using S/MIME digital 
    ///   signatures. 
    /// </value>
        SMIME,
    }
    
    /// <summary>
    ///   Defines information about an authentication including the date on 
    ///   which the authentication took place and the type of authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class AuthenticationInfo {
        
        private System.DateTime dateField;
        
        private AuthenticationType typeField;
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The date the authentication took place.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of authentication.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AuthenticationType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <summary>
    ///   Parameters for a generic authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericAuthenticateParmsEx {
        
        private System.Nullable<SecurityLevel> securityLevelField;
        
        private System.Nullable<AuthenticationType> authenticationTypeField;
        
        private string applicationNameField;
        
        private System.Nullable<int> challengeSizeField;
        
        private System.Nullable<int> numWrongAnswersAllowedField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private string serialNumberField;
        
        private string tokenVendorIdField;
        
        private string[] tokenSetsField;
        
        private System.Nullable<bool> tokenMutualAuthenticationField;
        
        private BiometricFilter biometricFilterField;
        
        private string[] dataSignatureValuesField;
        
        private AuthenticationSecretParms authSecretParmsField;
        
        private SharedSecretParms sharedSecretParmsField;
        
        private System.Nullable<bool> registerMachineSecretField;
        
        private MachineSecret machineSecretField;
        
        private string iPAddressField;
        
        private string certificateField;
        
        private ExternalRiskScoreParms externalRiskScoreField;
        
        private string newPasswordField;
        
        private string passwordNameField;
        
        private string newPVNField;
        
        private AuthenticationType[] challengeHistoryField;
        
        private string transactionIdField;
        
        private System.Nullable<bool> cancelTransactionField;
        
        private System.Nullable<bool> returnCertificateResponseField;
        
        private NameValue[] transactionDetailsField;
        
        private System.Nullable<bool> useDefaultDeliveryField;
        
        private string[] contactInfoLabelField;
        
        private System.Nullable<bool> deliverForDynamicRefreshField;
        
        private System.Nullable<bool> performDeliveryAndSignatureField;
        
        private System.Nullable<bool> requireDeliveryAndSignatureIfAvailableField;
        
        private string[] retrieveRepositoryAttributesField;
        
        private byte[] tokenProtectedOfflineOTPClientSecretField;
        
        private string tokenProtectedOfflineOTPClientNameField;
        
        private System.Nullable<TokenProtectedOfflineOTPGetType> tokenProtectedOfflineOTPGetField;
        
        private System.Nullable<int> tokenProtectedOfflineOTPSizeField;
        
        private System.Nullable<bool> tokenProtectedOfflineOTPDoNotOptimizeField;
        
    /// <datatype>
    ///   SecurityLevel
    /// </datatype>
    /// <value>
    ///   The security level specifying which policies to use when 
    ///   authenticating the response. If no value is specified, NORMAL will be used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<SecurityLevel> SecurityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of challenge being authenticated.
    ///   If not specified, the default authentication type is used.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<AuthenticationType> AuthenticationType {
            get {
                return this.authenticationTypeField;
            }
            set {
                this.authenticationTypeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, this argument is the name of the application. This value 
    ///   will be included in any authentication audits so that the 
    ///   application performing the authentication can be tracked. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for GRID and QA challenges. If specified, it 
    ///   defines the number of questions to ask for a QA challenge or the number of 
    ///   cells to ask for a GRID challenge. The specified value must be within 
    ///   the range allowed by policy. 
    ///   If this value is specified, and the user does not use a GRID or QA 
    ///   challenge, then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> ChallengeSize {
            get {
                return this.challengeSizeField;
            }
            set {
                this.challengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of wrong answers allowed in a QA challenge response. If not 
    ///   specified, the value defaults to policy. If specified, the value 
    ///   must be within the range allowed by policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> numWrongAnswersAllowed {
            get {
                return this.numWrongAnswersAllowedField;
            }
            set {
                this.numWrongAnswersAllowedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this argument specifies a list of authentication types 
    ///   that require a PVN for this operation. The values in this list are 
    ///   combined with the list of authentication types specified in the 
    ///   authTypesRequiringPVN policy for this user. Any authentication types 
    ///   specified in this value must be authentication types that support PVN. An 
    ///   application can use this argument to require a PVN for an authentication 
    ///   type where the PVN is not required by the policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, only a card or token with this serial number will be 
    ///   used to authenticate a GRID, TOKENRO or TOKENCR challenge. The specified 
    ///   card or token must be in the pending or current state. If specified, 
    ///   the user's temporary PIN will not be used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string serialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If a serialNumber is specified then this argument can be used to 
    ///   specify the token vendor of the token to be used for authentication. If 
    ///   not specified, the default token vendor will be used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenVendorId {
            get {
                return this.tokenVendorIdField;
            }
            set {
                this.tokenVendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If this argument is set, authentication of a token challenge will only 
    ///   consider tokens whose set is set to one of the specified values. If 
    ///   this argument is not set, authentication of a token challenge will 
    ///   consider all of the user's tokens. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] tokenSets {
            get {
                return this.tokenSetsField;
            }
            set {
                this.tokenSetsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If this value is set to true, token authentication is treated as 
    ///   completing a mutual authentication instead of normal token authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenMutualAuthentication {
            get {
                return this.tokenMutualAuthenticationField;
            }
            set {
                this.tokenMutualAuthenticationField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricFilter
    /// </datatype>
    /// <value>
    ///   If this argument is set, authentication of a biometric challenge will 
    ///   only consider user biometrics that match this filter. If this 
    ///   argument is not set, authentication of a biometric challenge will consider 
    ///   all of the user's biometrics. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricFilter biometricFilter {
            get {
                return this.biometricFilterField;
            }
            set {
                this.biometricFilterField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If specified with a TOKENRO authentication, these values will be 
    ///   validated along with the response using token data signature validation. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] dataSignatureValues {
            get {
                return this.dataSignatureValuesField;
            }
            set {
                this.dataSignatureValuesField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies authentication secrets to be returned, authentication 
    ///   secrets to replace or be merged with existing values or authentication 
    ///   secrets to be removed. These operations only occur after a successful 
    ///   authentication. If this value is not specified, no authentication 
    ///   secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationSecretParms authSecretParms {
            get {
                return this.authSecretParmsField;
            }
            set {
                this.authSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies shared secrets to be returned, shared secrets to replace or 
    ///   be merged with existing values or shared secrets to be removed. These 
    ///   operations only occur after a successful authentication. If this 
    ///   value is no shared secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SharedSecretParms sharedSecretParms {
            get {
                return this.sharedSecretParmsField;
            }
            set {
                this.sharedSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, a new machine secret will be registered if this request is 
    ///   authenticated. This argument is ignored if machineSecret is specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> registerMachineSecret {
            get {
                return this.registerMachineSecretField;
            }
            set {
                this.registerMachineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   The machine secret to be updated or created once the response is 
    ///   authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The IP address to be added to the user's location history once the 
    ///   response is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The Base-64 encoded X.509 certificate to be added to the user's list 
    ///   of registered certificates. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoreParms
    /// </datatype>
    /// <value>
    ///   Parameters used to perform an external risk score.
    ///   If the session Id is provided as part of the 
    ///   authenticateGenericChallenge call then the risk engine associated with the user will be asked 
    ///   to reset the risk score for the current session. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoreParms externalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new password provided for a password change.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPassword {
            get {
                return this.newPasswordField;
            }
            set {
                this.newPasswordField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the password to use when authenticating a password. If not 
    ///   specified, the user's default password is used. If the named 
    ///   password does not exist, an error is returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string passwordName {
            get {
                return this.passwordNameField;
            }
            set {
                this.passwordNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new personal verification number (PVN) provided for creating or 
    ///   changing a user's PVN. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPVN {
            get {
                return this.newPVNField;
            }
            set {
                this.newPVNField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   A list of authentication types that have already been authenticated by 
    ///   the application. If the response of this request is authenticated, 
    ///   this list will be updated with the authentication type of this 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] ChallengeHistory {
            get {
                return this.challengeHistoryField;
            }
            set {
                this.challengeHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this request is authenticating a token online transaction or a 
    ///   certificate authentication request where the security challenge has been 
    ///   delivered to an Entrust IdentityGuard mobile client for 
    ///   authentication then instead of specifying a response the application can specify 
    ///   the transaction id of the request. If the mobile application has 
    ///   returned a response to Entrust IdentityGuard this transaction id will be 
    ///   used to retrieve the response. If a response is not available for the 
    ///   transaction, Entrust IdentityGuard will return an error indicating 
    ///   that the application should try again later. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   When the request includes a transactionId to check for a transaction 
    ///   response and a response is not ready for the transaction, by default 
    ///   Entrust IdentityGuard will return an error indicating that the 
    ///   application should try again later. If the cancelTransaction parameter is 
    ///   specified with the value true, Entrust IdentityGuard will instead 
    ///   cancel the transaction and return an error indicating that the transaction 
    ///   has been canceled if no response is available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> cancelTransaction {
            get {
                return this.cancelTransactionField;
            }
            set {
                this.cancelTransactionField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If transaction authentication is being performed as part of this 
    ///   authentication, the signed certificate response will be returned in the 
    ///   response if this argument is set to true. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> ReturnCertificateResponse {
            get {
                return this.returnCertificateResponseField;
            }
            set {
                this.returnCertificateResponseField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   Transaction details can be included in the authenticate request. If 
    ///   provided, the same transaction details must have previously been 
    ///   included in the challenge request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] transactionDetails {
            get {
                return this.transactionDetailsField;
            }
            set {
                this.transactionDetailsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If OTP dynamic refresh is enabled and new OTPs are generated, the OTPs 
    ///   will be delivered to the user's default delivery mechanism if this 
    ///   flag is set to true. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> useDefaultDelivery {
            get {
                return this.useDefaultDeliveryField;
            }
            set {
                this.useDefaultDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If OTP dynamic refresh is enabled and new OTPs are generated and 
    ///   useDefaultDelivery is not set to true, the OTPs will be delivered to the 
    ///   contacts specified by this attribute. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] contactInfoLabel {
            get {
                return this.contactInfoLabelField;
            }
            set {
                this.contactInfoLabelField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   By default, OTPs are only delivered during authentication if dynamic 
    ///   refresh is enabled, new OTPs are generated and delivery contact values 
    ///   are specified. If deliveryForDynamicRefresh is set to true, OTPs 
    ///   will be delivered even if new OTPs are not generated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> deliverForDynamicRefresh {
            get {
                return this.deliverForDynamicRefreshField;
            }
            set {
                this.deliverForDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If TOKENRO authentication is being performed and transaction details 
    ///   are specified, by default the transaction details will be included in 
    ///   the token response validation performed during authentication if 
    ///   supported by the token. If this parameter is set to false, the 
    ///   transaction details will not be included in the token response validation. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> performDeliveryAndSignature {
            get {
                return this.performDeliveryAndSignatureField;
            }
            set {
                this.performDeliveryAndSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This parameter only applies when performing TOKENRO authentication 
    ///   when transaction details are specified. The intent of this parameter is 
    ///   to allow an application to limit authentication to only tokens that 
    ///   support delivery and signature. If this parameter is set to true and a 
    ///   user has one or more active tokens that support delivery and 
    ///   signature, only those tokens will be used for authentication. If this 
    ///   parameter is set to true and a user doesn't have any active tokens that 
    ///   support delivery and signature, then any active tokens will be used for 
    ///   authentication. If this parameter is not set or is set to false, then 
    ///   any active tokens will be used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> requireDeliveryAndSignatureIfAvailable {
            get {
                return this.requireDeliveryAndSignatureIfAvailableField;
            }
            set {
                this.requireDeliveryAndSignatureIfAvailableField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   Defines additional LDAP attributes to search for during an 
    ///   authenticate call. All values will be returned in the 
    ///   retrievedRepositoryAttributes of the corresponding GenericAuthenticateResponse object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] retrieveRepositoryAttributes {
            get {
                return this.retrieveRepositoryAttributesField;
            }
            set {
                this.retrieveRepositoryAttributesField = value;
            }
        }
        
    /// <datatype>
    ///   base64Binary
    /// </datatype>
    /// <value>
    ///   Defines the shared secret required for performing OTP download. This 
    ///   only applies for token authentications for tokens which support OTP 
    ///   download. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] tokenProtectedOfflineOTPClientSecret {
            get {
                return this.tokenProtectedOfflineOTPClientSecretField;
            }
            set {
                this.tokenProtectedOfflineOTPClientSecretField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   Defines an optional name for the client that will be stored in 
    ///   IdentityGuard alongside the shared secret to simplify the management of 
    ///   multiple clients registered against tokens for protected offline OTP 
    ///   support. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenProtectedOfflineOTPClientName {
            get {
                return this.tokenProtectedOfflineOTPClientNameField;
            }
            set {
                this.tokenProtectedOfflineOTPClientNameField = value;
            }
        }
        
    /// <datatype>
    ///   TokenProtectedOfflineOTPGetType
    /// </datatype>
    /// <value>
    ///   Defines the shared secret required for performing OTP download. This 
    ///   only applies for token authentications for tokens which support OTP 
    ///   download. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenProtectedOfflineOTPGetType> tokenProtectedOfflineOTPGet {
            get {
                return this.tokenProtectedOfflineOTPGetField;
            }
            set {
                this.tokenProtectedOfflineOTPGetField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   Defines the number of hours' worth of OTPs to download for the token. 
    ///   Applies only where the token download type is set to CUSTOM. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> tokenProtectedOfflineOTPSize {
            get {
                return this.tokenProtectedOfflineOTPSizeField;
            }
            set {
                this.tokenProtectedOfflineOTPSizeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A flag indicating that the server should not try to optimize the 
    ///   number of OTPs returned. By default, the server does not send OTPs that it 
    ///   believes were returned in previous requests if those OTPs have not 
    ///   yet expired. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenProtectedOfflineOTPDoNotOptimize {
            get {
                return this.tokenProtectedOfflineOTPDoNotOptimizeField;
            }
            set {
                this.tokenProtectedOfflineOTPDoNotOptimizeField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines filters that specify which user biometrics are to be used for 
    ///   authentication purposes. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class BiometricFilter {
        
        private string[] vendorIdsField;
        
        private string vendorManufacturerField;
        
        private BiometricType[] typesField;
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If specified, only user biometrics with the one of the given ids or 
    ///   names are matched. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] VendorIds {
            get {
                return this.vendorIdsField;
            }
            set {
                this.vendorIdsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, only user biometrics whose vendor has the given 
    ///   manufacturer are matched. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string VendorManufacturer {
            get {
                return this.vendorManufacturerField;
            }
            set {
                this.vendorManufacturerField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricType[]
    /// </datatype>
    /// <value>
    ///   If specified, only user biometrics whose vendor type has one of the 
    ///   given values are matched. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public BiometricType[] Types {
            get {
                return this.typesField;
            }
            set {
                this.typesField = value;
            }
        }
    }
    
    /// <summary>
    ///   This enumerated type defines the ways that the client can specify how 
    ///   many future OTPs to be generated and returned. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public enum TokenProtectedOfflineOTPGetType {
        
    /// <value>
    ///   The client does not want to any offline OTPs.
    /// </value>
        NONE,
        
    /// <value>
    ///   The client wants the default recommended number of OTPs as defined by 
    ///   policy. 
    /// </value>
        MINOR,
        
    /// <value>
    ///   The client wants the maximum number of OTPs as defined by policy. 
    /// </value>
        MAX,
        
    /// <value>
    ///   The client wants a specific number of hours' worth of OTPs. The number 
    ///   of hours requested will be adjusted to not exceed the maximum as 
    ///   defined by policy. 
    /// </value>
        CUSTOM,
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   authenticateGenericChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticateGenericChallengeCallParmsEx {
        
        private string userIdField;
        
        private Response responseField;
        
        private GenericAuthenticateParmsEx parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to authenticate
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   Response
    /// </datatype>
    /// <value>
    ///   The response to the challenge. The response consists of an optional 
    ///   personal verification number (PVN) and one of a challenge response 
    ///   (which is an array of strings) or a radius response (which is the 
    ///   response encoded as a Radius PAP, CHAP or MS-CHAP value). 
    ///   The response should be null if certificate authentication is being 
    ///   used and the response was delivered from a mobile application directly 
    ///   to Entrust IdentityGuard. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public Response response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   GenericAuthenticateParmsEx
    /// </datatype>
    /// <value>
    ///   The parameters for the authentication request.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericAuthenticateParmsEx parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   The response to an IG challenge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class Response {
        
        private string pVNField;
        
        private string[] responseField;
        
        private RadiusResponse radiusResponseField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The personal verification number (PVN).
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string PVN {
            get {
                return this.pVNField;
            }
            set {
                this.pVNField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The response specified as a list of strings.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   RadiusResponse
    /// </datatype>
    /// <value>
    ///   The response specified in Radius format.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public RadiusResponse radiusResponse {
            get {
                return this.radiusResponseField;
            }
            set {
                this.radiusResponseField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines an Entrust IdentityGuard response sent from the Entrust 
    ///   IdentityGuard Radius proxy. The response may be PAP or CHAP. If neither are 
    ///   specified, an error is returned. If both are specified, PAP is used. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class RadiusResponse {
        
        private PAPResponse papField;
        
        private CHAPResponse chapField;
        
        private MSCHAPv1Response mSCHAPv1Field;
        
        private MSCHAPv2Response mSCHAPv2Field;
        
    /// <datatype>
    ///   PAPResponse
    /// </datatype>
    /// <value>
    ///   The PAP response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PAPResponse pap {
            get {
                return this.papField;
            }
            set {
                this.papField = value;
            }
        }
        
    /// <datatype>
    ///   CHAPResponse
    /// </datatype>
    /// <value>
    ///   The CHAP response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CHAPResponse chap {
            get {
                return this.chapField;
            }
            set {
                this.chapField = value;
            }
        }
        
    /// <datatype>
    ///   MSCHAPv1Response
    /// </datatype>
    /// <value>
    ///   The MSCHAPv1 response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MSCHAPv1Response MSCHAPv1 {
            get {
                return this.mSCHAPv1Field;
            }
            set {
                this.mSCHAPv1Field = value;
            }
        }
        
    /// <datatype>
    ///   MSCHAPv2Response
    /// </datatype>
    /// <value>
    ///   The MSCHAPv2 response.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MSCHAPv2Response MSCHAPv2 {
            get {
                return this.mSCHAPv2Field;
            }
            set {
                this.mSCHAPv2Field = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines an Entrust IdentityGuard response sent from the Entrust 
    ///   IdentityGuard Radius proxy when it receives the response protected using 
    ///   PAP. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class PAPResponse {
        
        private sbyte[] passwordField;
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The password.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines an Entrust IdentityGuard response sent from the Entrust 
    ///   IdentityGuard Radius proxy when it receives the response protected using 
    ///   CHAP. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class CHAPResponse {
        
        private sbyte idField;
        
        private sbyte[] challengeField;
        
        private sbyte[] responseField;
        
    /// <datatype>
    ///   byte
    /// </datatype>
    /// <value>
    ///   The CHAP id.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sbyte id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The CHAP challenge.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The CHAP response.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines an Entrust IdentityGuard response sent from the Entrust 
    ///   IdentityGuard Radius proxy when it receives the response protected using 
    ///   MSCHAPv1. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class MSCHAPv1Response {
        
        private sbyte[] challengeField;
        
        private sbyte[] responseField;
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The MSCHAP challenge.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The CHAP response.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
    }
    
    /// <summary>
    ///   Defines an Entrust IdentityGuard response sent from the Entrust 
    ///   IdentityGuard Radius proxy when it receives the response protected using 
    ///   MSCHAPv2. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class MSCHAPv2Response {
        
        private sbyte[] challengeField;
        
        private sbyte[] peerChallengeField;
        
        private sbyte[] responseField;
        
        private sbyte[] userNameField;
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The MSCHAP challenge.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The MSCHAP challenge.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] peerChallenge {
            get {
                return this.peerChallengeField;
            }
            set {
                this.peerChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The CHAP response.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   The MSCHAP username.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   authenticateGenericChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticateGenericChallengeCallParms {
        
        private string userIdField;
        
        private Response responseField;
        
        private GenericAuthenticateParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to authenticate
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   Response
    /// </datatype>
    /// <value>
    ///   The response to the challenge. The response consists of an optional 
    ///   personal verification number (PVN) and one of a challenge response 
    ///   (which is an array of strings) or a radius response (which is the 
    ///   response encoded as a Radius PAP, CHAP or MS-CHAP value). 
    ///   The response should be null if certificate authentication is being 
    ///   used and the response was delivered from a mobile application directly 
    ///   to Entrust IdentityGuard. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public Response response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   GenericAuthenticateParms
    /// </datatype>
    /// <value>
    ///   The parameters for the authentication request.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericAuthenticateParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   Parameters for a generic authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericAuthenticateParms {
        
        private System.Nullable<SecurityLevel> securityLevelField;
        
        private System.Nullable<AuthenticationType> authenticationTypeField;
        
        private string applicationNameField;
        
        private System.Nullable<int> challengeSizeField;
        
        private System.Nullable<int> numWrongAnswersAllowedField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private string serialNumberField;
        
        private string tokenVendorIdField;
        
        private string[] tokenSetsField;
        
        private System.Nullable<bool> tokenMutualAuthenticationField;
        
        private BiometricFilter biometricFilterField;
        
        private string[] dataSignatureValuesField;
        
        private AuthenticationSecretParms authSecretParmsField;
        
        private SharedSecretParms sharedSecretParmsField;
        
        private System.Nullable<bool> registerMachineSecretField;
        
        private MachineSecret machineSecretField;
        
        private string iPAddressField;
        
        private string certificateField;
        
        private ExternalRiskScoreParms externalRiskScoreField;
        
        private string newPasswordField;
        
        private string passwordNameField;
        
        private string newPVNField;
        
        private AuthenticationType[] challengeHistoryField;
        
        private string transactionIdField;
        
        private System.Nullable<bool> cancelTransactionField;
        
        private System.Nullable<bool> returnCertificateResponseField;
        
        private NameValue[] transactionDetailsField;
        
        private System.Nullable<bool> useDefaultDeliveryField;
        
        private string[] contactInfoLabelField;
        
        private System.Nullable<bool> deliverForDynamicRefreshField;
        
        private System.Nullable<bool> performDeliveryAndSignatureField;
        
        private System.Nullable<bool> requireDeliveryAndSignatureIfAvailableField;
        
        private string[] retrieveRepositoryAttributesField;
        
    /// <datatype>
    ///   SecurityLevel
    /// </datatype>
    /// <value>
    ///   The security level specifying which policies to use when 
    ///   authenticating the response. If no value is specified, NORMAL will be used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<SecurityLevel> SecurityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of challenge being authenticated.
    ///   If not specified, the default authentication type is used.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<AuthenticationType> AuthenticationType {
            get {
                return this.authenticationTypeField;
            }
            set {
                this.authenticationTypeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, this argument is the name of the application. This value 
    ///   will be included in any authentication audits so that the 
    ///   application performing the authentication can be tracked. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for GRID and QA challenges. If specified, it 
    ///   defines the number of questions to ask for a QA challenge or the number of 
    ///   cells to ask for a GRID challenge. The specified value must be within 
    ///   the range allowed by policy. 
    ///   If this value is specified, and the user does not use a GRID or QA 
    ///   challenge, then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> ChallengeSize {
            get {
                return this.challengeSizeField;
            }
            set {
                this.challengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of wrong answers allowed in a QA challenge response. If not 
    ///   specified, the value defaults to policy. If specified, the value 
    ///   must be within the range allowed by policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> numWrongAnswersAllowed {
            get {
                return this.numWrongAnswersAllowedField;
            }
            set {
                this.numWrongAnswersAllowedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this argument specifies a list of authentication types 
    ///   that require a PVN for this operation. The values in this list are 
    ///   combined with the list of authentication types specified in the 
    ///   authTypesRequiringPVN policy for this user. Any authentication types 
    ///   specified in this value must be authentication types that support PVN. An 
    ///   application can use this argument to require a PVN for an authentication 
    ///   type where the PVN is not required by the policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, only a card or token with this serial number will be 
    ///   used to authenticate a GRID, TOKENRO or TOKENCR challenge. The specified 
    ///   card or token must be in the pending or current state. If specified, 
    ///   the user's temporary PIN will not be used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string serialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If a serialNumber is specified then this argument can be used to 
    ///   specify the token vendor of the token to be used for authentication. If 
    ///   not specified, the default token vendor will be used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenVendorId {
            get {
                return this.tokenVendorIdField;
            }
            set {
                this.tokenVendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If this argument is set, authentication of a token challenge will only 
    ///   consider tokens whose set is set to one of the specified values. If 
    ///   this argument is not set, authentication of a token challenge will 
    ///   consider all of the user's tokens. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] tokenSets {
            get {
                return this.tokenSetsField;
            }
            set {
                this.tokenSetsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If this value is set to true, token authentication is treated as 
    ///   completing a mutual authentication instead of normal token authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenMutualAuthentication {
            get {
                return this.tokenMutualAuthenticationField;
            }
            set {
                this.tokenMutualAuthenticationField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricFilter
    /// </datatype>
    /// <value>
    ///   If this argument is set, authentication of a biometric challenge will 
    ///   only consider user biometrics that match this filter. If this 
    ///   argument is not set, authentication of a biometric challenge will consider 
    ///   all of the user's biometrics. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricFilter biometricFilter {
            get {
                return this.biometricFilterField;
            }
            set {
                this.biometricFilterField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If specified with a TOKENRO authentication, these values will be 
    ///   validated along with the response using token data signature validation. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] dataSignatureValues {
            get {
                return this.dataSignatureValuesField;
            }
            set {
                this.dataSignatureValuesField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies authentication secrets to be returned, authentication 
    ///   secrets to replace or be merged with existing values or authentication 
    ///   secrets to be removed. These operations only occur after a successful 
    ///   authentication. If this value is not specified, no authentication 
    ///   secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationSecretParms authSecretParms {
            get {
                return this.authSecretParmsField;
            }
            set {
                this.authSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecretParms
    /// </datatype>
    /// <value>
    ///   Specifies shared secrets to be returned, shared secrets to replace or 
    ///   be merged with existing values or shared secrets to be removed. These 
    ///   operations only occur after a successful authentication. If this 
    ///   value is no shared secrets will be returned or modified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SharedSecretParms sharedSecretParms {
            get {
                return this.sharedSecretParmsField;
            }
            set {
                this.sharedSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, a new machine secret will be registered if this request is 
    ///   authenticated. This argument is ignored if machineSecret is specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> registerMachineSecret {
            get {
                return this.registerMachineSecretField;
            }
            set {
                this.registerMachineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   The machine secret to be updated or created once the response is 
    ///   authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The IP address to be added to the user's location history once the 
    ///   response is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The Base-64 encoded X.509 certificate to be added to the user's list 
    ///   of registered certificates. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoreParms
    /// </datatype>
    /// <value>
    ///   Parameters used to perform an external risk score.
    ///   If the session Id is provided as part of the 
    ///   authenticateGenericChallenge call then the risk engine associated with the user will be asked 
    ///   to reset the risk score for the current session. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoreParms externalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new password provided for a password change.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPassword {
            get {
                return this.newPasswordField;
            }
            set {
                this.newPasswordField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the password to use when authenticating a password. If not 
    ///   specified, the user's default password is used. If the named 
    ///   password does not exist, an error is returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string passwordName {
            get {
                return this.passwordNameField;
            }
            set {
                this.passwordNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The new personal verification number (PVN) provided for creating or 
    ///   changing a user's PVN. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string newPVN {
            get {
                return this.newPVNField;
            }
            set {
                this.newPVNField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   A list of authentication types that have already been authenticated by 
    ///   the application. If the response of this request is authenticated, 
    ///   this list will be updated with the authentication type of this 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] ChallengeHistory {
            get {
                return this.challengeHistoryField;
            }
            set {
                this.challengeHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If this request is authenticating a token online transaction or a 
    ///   certificate authentication request where the security challenge has been 
    ///   delivered to an Entrust IdentityGuard mobile client for 
    ///   authentication then instead of specifying a response the application can specify 
    ///   the transaction id of the request. If the mobile application has 
    ///   returned a response to Entrust IdentityGuard this transaction id will be 
    ///   used to retrieve the response. If a response is not available for the 
    ///   transaction, Entrust IdentityGuard will return an error indicating 
    ///   that the application should try again later. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   When the request includes a transactionId to check for a transaction 
    ///   response and a response is not ready for the transaction, by default 
    ///   Entrust IdentityGuard will return an error indicating that the 
    ///   application should try again later. If the cancelTransaction parameter is 
    ///   specified with the value true, Entrust IdentityGuard will instead 
    ///   cancel the transaction and return an error indicating that the transaction 
    ///   has been canceled if no response is available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> cancelTransaction {
            get {
                return this.cancelTransactionField;
            }
            set {
                this.cancelTransactionField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If transaction authentication is being performed as part of this 
    ///   authentication, the signed certificate response will be returned in the 
    ///   response if this argument is set to true. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> ReturnCertificateResponse {
            get {
                return this.returnCertificateResponseField;
            }
            set {
                this.returnCertificateResponseField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   Transaction details can be included in the authenticate request. If 
    ///   provided, the same transaction details must have previously been 
    ///   included in the challenge request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] transactionDetails {
            get {
                return this.transactionDetailsField;
            }
            set {
                this.transactionDetailsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If OTP dynamic refresh is enabled and new OTPs are generated, the OTPs 
    ///   will be delivered to the user's default delivery mechanism if this 
    ///   flag is set to true. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> useDefaultDelivery {
            get {
                return this.useDefaultDeliveryField;
            }
            set {
                this.useDefaultDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If OTP dynamic refresh is enabled and new OTPs are generated and 
    ///   useDefaultDelivery is not set to true, the OTPs will be delivered to the 
    ///   contacts specified by this attribute. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] contactInfoLabel {
            get {
                return this.contactInfoLabelField;
            }
            set {
                this.contactInfoLabelField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   By default, OTPs are only delivered during authentication if dynamic 
    ///   refresh is enabled, new OTPs are generated and delivery contact values 
    ///   are specified. If deliveryForDynamicRefresh is set to true, OTPs 
    ///   will be delivered even if new OTPs are not generated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> deliverForDynamicRefresh {
            get {
                return this.deliverForDynamicRefreshField;
            }
            set {
                this.deliverForDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If TOKENRO authentication is being performed and transaction details 
    ///   are specified, by default the transaction details will be included in 
    ///   the token response validation performed during authentication if 
    ///   supported by the token. If this parameter is set to false, the 
    ///   transaction details will not be included in the token response validation. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> performDeliveryAndSignature {
            get {
                return this.performDeliveryAndSignatureField;
            }
            set {
                this.performDeliveryAndSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This parameter only applies when performing TOKENRO authentication 
    ///   when transaction details are specified. The intent of this parameter is 
    ///   to allow an application to limit authentication to only tokens that 
    ///   support delivery and signature. If this parameter is set to true and a 
    ///   user has one or more active tokens that support delivery and 
    ///   signature, only those tokens will be used for authentication. If this 
    ///   parameter is set to true and a user doesn't have any active tokens that 
    ///   support delivery and signature, then any active tokens will be used for 
    ///   authentication. If this parameter is not set or is set to false, then 
    ///   any active tokens will be used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> requireDeliveryAndSignatureIfAvailable {
            get {
                return this.requireDeliveryAndSignatureIfAvailableField;
            }
            set {
                this.requireDeliveryAndSignatureIfAvailableField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   Defines additional LDAP attributes to search for during an 
    ///   authenticate call. All values will be returned in the 
    ///   retrievedRepositoryAttributes of the corresponding GenericAuthenticateResponse object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] retrieveRepositoryAttributes {
            get {
                return this.retrieveRepositoryAttributesField;
            }
            set {
                this.retrieveRepositoryAttributesField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a mechanism that can be used 
    ///   to deliver OTPs. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class DeliveryMechanismEx {
        
        private string contactInfoLabelField;
        
        private string contactInfoValueField;
        
        private string deliveryConfigurationNameField;
        
        private bool defaultContactInfoField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The contact information label of the user.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string contactInfoLabel {
            get {
                return this.contactInfoLabelField;
            }
            set {
                this.contactInfoLabelField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The contact information value of the user.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string contactInfoValue {
            get {
                return this.contactInfoValueField;
            }
            set {
                this.contactInfoValueField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The delivery configuration defined for the contact.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string deliveryConfigurationName {
            get {
                return this.deliveryConfigurationNameField;
            }
            set {
                this.deliveryConfigurationNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Flag indicating if this is the default contact for the user.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool defaultContactInfo {
            get {
                return this.defaultContactInfoField;
            }
            set {
                this.defaultContactInfoField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about an OTP challenge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class OTPChallengeEx {
        
        private System.Nullable<bool> manualDeliveryRequiredField;
        
        private DeliveryMechanismEx[] deliveryMechanismUsedField;
        
        private DeliveryMechanismEx[] deliveryMechanismFailedField;
        
        private AuthenticationFault[] deliveryMechanismFailureReasonField;
        
        private DeliveryMechanismEx[] deliveryMechanismField;
        
        private bool dynamicRefreshField;
        
        private System.Nullable<bool> needsDeliveryForChallengeField;
        
        private System.Nullable<bool> needsDeliveryForAuthenticateField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the application must retrieve and delivery the OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> manualDeliveryRequired {
            get {
                return this.manualDeliveryRequiredField;
            }
            set {
                this.manualDeliveryRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanismEx[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms that were used to 
    ///   successfully deliver the OTPs to the user. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanismEx[] deliveryMechanismUsed {
            get {
                return this.deliveryMechanismUsedField;
            }
            set {
                this.deliveryMechanismUsedField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanismEx[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms that were used to 
    ///   deliver the OTP to the user where delivery failed. 
    ///   If this attribute is set, the deliveryMechanismFailureReason attribute 
    ///   will also be set with corresponding fault values providing the 
    ///   reason why each delivery failed. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanismEx[] deliveryMechanismFailed {
            get {
                return this.deliveryMechanismFailedField;
            }
            set {
                this.deliveryMechanismFailedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the reason why each corresponding 
    ///   delivery mechanism specified in the deliveryMechanismFailed attribute failed 
    ///   to deliver OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationFault[] deliveryMechanismFailureReason {
            get {
                return this.deliveryMechanismFailureReasonField;
            }
            set {
                this.deliveryMechanismFailureReasonField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanismEx[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the delivery mechanisms available to 
    ///   deliver the user's OTPs. If the OTPs weren't already delivered the 
    ///   application should select delivery mechanisms from this list and request 
    ///   another challenge specifying which mechanisms to use. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanismEx[] deliveryMechanism {
            get {
                return this.deliveryMechanismField;
            }
            set {
                this.deliveryMechanismField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This flag indicates whether dynamic refresh is enabled or not. When 
    ///   dynamic refresh is enabled, OTPs are normally generated and delivered 
    ///   after authentication. When dynamic refresh is not enabled, OTPs are 
    ///   generated and delivered as part of getting the challenge. When dynamic 
    ///   refresh is enabled, OTPs will be generated and delivered during 
    ///   challenge if no OTPs exist. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool dynamicRefresh {
            get {
                return this.dynamicRefreshField;
            }
            set {
                this.dynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If dynamic refresh is enabled, this flag will be set to true if OTPs 
    ///   were generated during the challenge and were not delivered because the 
    ///   application did not specify delivery mechanisms. 
    ///   This is an indication to the application that even though dynamic 
    ///   refresh is enabled, the application should request another challenge 
    ///   specifying delivery mechanisms and requesting deliveryForDynamicRefresh 
    ///   as true in the challenge parameters. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> needsDeliveryForChallenge {
            get {
                return this.needsDeliveryForChallengeField;
            }
            set {
                this.needsDeliveryForChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If dynamic refresh is enabled, this flag will be set to true if OTPs 
    ///   will be generated during authentication because the user has reached 
    ///   the OTP refresh threshold. If this flag is set to true, the 
    ///   application should specify delivery mechanisms as parameters to the 
    ///   authentication request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> needsDeliveryForAuthenticate {
            get {
                return this.needsDeliveryForAuthenticateField;
            }
            set {
                this.needsDeliveryForAuthenticateField = value;
            }
        }
    }
    
    /// <summary>
    ///   A generic challenge. This can contain a challenge for any of the types 
    ///   defined by AuthenticationType. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericChallengeEx {
        
        private ChallengeRequestResult challengeRequestResultField;
        
        private RiskScoringResult riskScoringResultField;
        
        private System.Nullable<AuthenticationType> typeField;
        
        private PVNInfo pVNInfoField;
        
        private ChallengeSet gridChallengeField;
        
        private string[] qAChallengeField;
        
        private TokenChallenge tokenChallengeField;
        
        private OTPChallengeEx oTPChallengeExField;
        
        private PasswordChallenge passwordChallengeField;
        
        private CertificateChallenge certificateChallengeField;
        
        private ExternalChallenge externalChallengeField;
        
        private BiometricChallenge biometricChallengeField;
        
        private MachineSecret machineSecretField;
        
        private MachineSecretPolicy machineSecretPolicyField;
        
        private IPLocation iPLocationField;
        
        private CertificateData certificateField;
        
        private NameValue[] authenticationSecretsField;
        
        private SharedSecret[] sharedSecretsField;
        
        private string transactionIdField;
        
        private sbyte[] qRCodeField;
        
        private string anonymousChallengeURLField;
        
        private AuthenticationFault warningFaultField;
        
        private string usernameField;
        
        private string groupField;
        
        private System.Nullable<bool> disableChallengeRetentionField;
        
    /// <datatype>
    ///   ChallengeRequestResult
    /// </datatype>
    /// <value>
    ///   This value will indicate if the challenge request resulted in 
    ///   AUTHENTICATED (no challenge response is required), CHALLENGE (a challenge 
    ///   response is required) or REJECT (the user was not authenticated). 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ChallengeRequestResult challengeRequestResult {
            get {
                return this.challengeRequestResultField;
            }
            set {
                this.challengeRequestResultField = value;
            }
        }
        
    /// <datatype>
    ///   RiskScoringResult
    /// </datatype>
    /// <value>
    ///   If risk based authentication was performed, this value will be set and 
    ///   will indicate which parts of authentication passed or failed and why 
    ///   they failed. 
    ///   Risk based authentication is performed if either and IP address or 
    ///   machine secret is included with the challenge request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public RiskScoringResult riskScoringResult {
            get {
                return this.riskScoringResultField;
            }
            set {
                this.riskScoringResultField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of authentication that is required to answer the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<AuthenticationType> type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
    /// <datatype>
    ///   PVNInfo
    /// </datatype>
    /// <value>
    ///   Information about the personal verification number (PVN) for this 
    ///   challenge indicating if the PVN is required and/or available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PVNInfo PVNInfo {
            get {
                return this.pVNInfoField;
            }
            set {
                this.pVNInfoField = value;
            }
        }
        
    /// <datatype>
    ///   ChallengeSet
    /// </datatype>
    /// <value>
    ///   A Grid challenge. This will be non-null if, and only if, the 
    ///   authentication type is GRID. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ChallengeSet GridChallenge {
            get {
                return this.gridChallengeField;
            }
            set {
                this.gridChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   A Question and Answer challenge. This will be non-null if, and only 
    ///   if, the authentication type is QA. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] QAChallenge {
            get {
                return this.qAChallengeField;
            }
            set {
                this.qAChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   TokenChallenge
    /// </datatype>
    /// <value>
    ///   A token challenge. This will be non-null if, and only if, the 
    ///   authentication type is TOKENRO or TOKENCR. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenChallenge TokenChallenge {
            get {
                return this.tokenChallengeField;
            }
            set {
                this.tokenChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   OTPChallengeEx
    /// </datatype>
    /// <value>
    ///   An OTP challenge Ex. This will be non-null if, and only if, the 
    ///   authentication type is OTP. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public OTPChallengeEx OTPChallengeEx {
            get {
                return this.oTPChallengeExField;
            }
            set {
                this.oTPChallengeExField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordChallenge
    /// </datatype>
    /// <value>
    ///   A password challenge. This will be non-null if, and only if, the 
    ///   authentication type is PASSWORD. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordChallenge PasswordChallenge {
            get {
                return this.passwordChallengeField;
            }
            set {
                this.passwordChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateChallenge
    /// </datatype>
    /// <value>
    ///   A certificate challenge. This will be non-null if, and only if, the 
    ///   authentication type is CERTIFICATE. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateChallenge CertificateChallenge {
            get {
                return this.certificateChallengeField;
            }
            set {
                this.certificateChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalChallenge
    /// </datatype>
    /// <value>
    ///   A challenge for an external authentication service.
    ///   This will be non-null if, and only if, the authentication type is 
    ///   EXTERNAL. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalChallenge ExternalChallenge {
            get {
                return this.externalChallengeField;
            }
            set {
                this.externalChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricChallenge
    /// </datatype>
    /// <value>
    ///   A biometric challenge. This will be non-null if, and only if, the 
    ///   authentication type is BIOMETRIC. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricChallenge BiometricChallenge {
            get {
                return this.biometricChallengeField;
            }
            set {
                this.biometricChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included a machine secret, this 
    ///   attribute will contain the updated machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecretPolicy
    /// </datatype>
    /// <value>
    ///   This structure will contain policy describing what parameters are 
    ///   required in a machine secret. The application can use this information to 
    ///   determine what fields it must include in a machine secret that it 
    ///   wants to register. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecretPolicy machineSecretPolicy {
            get {
                return this.machineSecretPolicyField;
            }
            set {
                this.machineSecretPolicyField = value;
            }
        }
        
    /// <datatype>
    ///   IPLocation
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included an IP address, this 
    ///   attribute will include the location of the IP address. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPLocation IPLocation {
            get {
                return this.iPLocationField;
            }
            set {
                this.iPLocationField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included a certificate, this 
    ///   attribute will include information about the certificate used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData Certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   The user's authentication secrets. The secrets included are determined 
    ///   by the AuthenticationSecretParms passed when the challenge was 
    ///   requested. By default, no authentication secrets are included, but this 
    ///   can be changed by setting the challenge parameters used when getting 
    ///   the challenge. If the user has no secrets, or the requested secrets are 
    ///   not found, this element will be null. The system policy may also 
    ///   prevent a user's authentication secrets from being returned unless the 
    ///   request is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] AuthenticationSecrets {
            get {
                return this.authenticationSecretsField;
            }
            set {
                this.authenticationSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   The user's shared secrets. The secrets included are determined by the 
    ///   SharedSecretParms passed when the challenge was requested. By 
    ///   default, no shared secrets are included. If the user has no secrets or the 
    ///   requested secrets are not found, this element will be null. The system 
    ///   policy may also prevent secrets from being returned unless the 
    ///   request is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SharedSecrets {
            get {
                return this.sharedSecretsField;
            }
            set {
                this.sharedSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If transaction authentication is being performed as part of this 
    ///   authentication, this value will return the transaction identifier of the 
    ///   transaction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   If an anonymous security challenge was requested this value returns 
    ///   the challenge as a QR code. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] QRCode {
            get {
                return this.qRCodeField;
            }
            set {
                this.qRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If an anonymous security challenge was requested this value returns 
    ///   the challenge as a URL. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string AnonymousChallengeURL {
            get {
                return this.anonymousChallengeURLField;
            }
            set {
                this.anonymousChallengeURLField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   A fault indicating that an error occurred after an authentication 
    ///   success. This could occur if there was an error updating the user's 
    ///   authentication or shared secrets. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault WarningFault {
            get {
                return this.warningFaultField;
            }
            set {
                this.warningFaultField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This value specifies whether challenge retention is disabled; 
    ///   depending on the authentication type used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> disableChallengeRetention {
            get {
                return this.disableChallengeRetentionField;
            }
            set {
                this.disableChallengeRetentionField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about a certificate challenge. 
    ///   To authenticate a certificate challenge, the client should hash the 
    ///   challenge using one of the listed allowed hashing algorithms and then 
    ///   sign the resulting value using the private key corresponding to one of 
    ///   the specified certificates or smart credentials. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class CertificateChallenge {
        
        private string challengeField;
        
        private string hashingAlgorithmField;
        
        private CertificateData[] certificatesField;
        
        private SmartCredentialData[] smartCredentialsField;
        
        private string transactionIdField;
        
        private System.DateTime createDateField;
        
        private int lifetimeField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The certificate challenge. The application must hash and sign this 
    ///   challenge to authenticate the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string challenge {
            get {
                return this.challengeField;
            }
            set {
                this.challengeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The hashing algorithm to be used to hash the challenge before it is 
    ///   signed. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string hashingAlgorithm {
            get {
                return this.hashingAlgorithmField;
            }
            set {
                this.hashingAlgorithmField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData[]
    /// </datatype>
    /// <value>
    ///   The certificates that can be used to authenticate the challenge. The 
    ///   application must use a private key corresponding to one of the 
    ///   certificates or one of the smart credentials to sign the hash of the 
    ///   challenge. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public CertificateData[] certificates {
            get {
                return this.certificatesField;
            }
            set {
                this.certificatesField = value;
            }
        }
        
    /// <datatype>
    ///   SmartCredentialData[]
    /// </datatype>
    /// <value>
    ///   The smart credentials that can be used to authenticate the challenge. 
    ///   The application must use a private key corresponding to one of the 
    ///   certificates or one of the smart credentials to sign the hash of the 
    ///   challenge. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SmartCredentialData[] smartCredentials {
            get {
                return this.smartCredentialsField;
            }
            set {
                this.smartCredentialsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The transaction id associated with this request.
    ///   This value will be set only when the challenge was delivered to one or 
    ///   more smart credentials. This transaction id should be specified in a 
    ///   subsequent authenticateGenericChallenge call when the application 
    ///   doesn't provide a response expected the response to be returned to 
    ///   Entrust IdentityGuard out of band. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   dateTime
    /// </datatype>
    /// <value>
    ///   The time that this challenge was created.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The lifetime of this challenge in seconds.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Lifetime {
            get {
                return this.lifetimeField;
            }
            set {
                this.lifetimeField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains information about what biometrics can be used 
    ///   for a BIOMETRIC challenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:commonV11")]
    public partial class BiometricChallenge {
        
        private BiometricData[] biometricsField;
        
    /// <datatype>
    ///   BiometricData[]
    /// </datatype>
    /// <value>
    ///   The biometrics that can be used to authenticate the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public BiometricData[] biometrics {
            get {
                return this.biometricsField;
            }
            set {
                this.biometricsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure describes policy values that control what fields must 
    ///   be included in a machine secret. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class MachineSecretPolicy {
        
        private bool machineNonceRequiredField;
        
        private bool sequenceNonceRequiredField;
        
        private int appDataRequiredField;
        
        private bool deviceFingerprintRequiredField;
        
        private int maxMachineSecretSizeField;
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the machine nonce is required in the machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool machineNonceRequired {
            get {
                return this.machineNonceRequiredField;
            }
            set {
                this.machineNonceRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the sequence nonce is required in the machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool sequenceNonceRequired {
            get {
                return this.sequenceNonceRequiredField;
            }
            set {
                this.sequenceNonceRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The number of application data elements required in the machine 
    ///   secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int appDataRequired {
            get {
                return this.appDataRequiredField;
            }
            set {
                this.appDataRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   A boolean flag indicating if a device fingerprint is required. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deviceFingerprintRequired {
            get {
                return this.deviceFingerprintRequiredField;
            }
            set {
                this.deviceFingerprintRequiredField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The maximum size in kilobytes of a machine secret.
    ///   The size includes the machine secret label, machine nonce, sequence 
    ///   nonce, the name and value of each application data element and the 
    ///   device fingerprint. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maxMachineSecretSize {
            get {
                return this.maxMachineSecretSizeField;
            }
            set {
                this.maxMachineSecretSizeField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getGenericChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetGenericChallengeCallParmsEx {
        
        private string userIdField;
        
        private GenericChallengeParmsEx parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to retrieve a challenge for.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   GenericChallengeParmsEx
    /// </datatype>
    /// <value>
    ///   Parameters used to construct the challenge.
    ///   This can be used to specify the type of challenge and request that 
    ///   authentication secrets be returned. This parameter can be set to null, 
    ///   in which case the server will use the default authentication type for 
    ///   the user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericChallengeParmsEx parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   Parameters for a generic challenge. These can be used to control the 
    ///   type of challenge returned. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericChallengeParmsEx : GenericChallengeParms {
    }
    
    /// <summary>
    ///   Parameters for a generic challenge. These can be used to control the 
    ///   type of challenge returned. 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericChallengeParmsEx))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericChallengeParms {
        
        private AuthenticationType[] challengeHistoryField;
        
        private System.Nullable<SecurityLevel> securityLevelField;
        
        private System.Nullable<AuthenticationType> authenticationTypeField;
        
        private AuthenticationType[] authenticationTypeListField;
        
        private string applicationNameField;
        
        private System.Nullable<bool> requiresPVNField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private System.Nullable<int> gridChallengeSizeField;
        
        private System.Nullable<int> qAChallengeSizeField;
        
        private AuthenticationSecretParms authSecretParmsField;
        
        private SharedSecretParms sharedSecretParmsField;
        
        private string iPAddressField;
        
        private System.Nullable<bool> updateMachineSecretField;
        
        private System.Nullable<bool> registerMachineSecretField;
        
        private MachineSecret machineSecretField;
        
        private System.Nullable<bool> registerCertificateField;
        
        private string certificateField;
        
        private ExternalRiskScoreParms externalRiskScoreField;
        
        private System.Nullable<bool> useDefaultDeliveryField;
        
        private string[] contactInfoLabelField;
        
        private System.Nullable<bool> deliverForDynamicRefreshField;
        
        private System.Nullable<bool> onlySelectOTPAuthenticationIfDeliveryAvailableField;
        
        private string tokenSerialNumberField;
        
        private string tokenVendorIdField;
        
        private string[] tokenSetsField;
        
        private System.Nullable<bool> tokenSupportsQRCodeTokenCRField;
        
        private System.Nullable<int> tokenChallengeQRCodeSizeField;
        
        private BiometricFilter biometricFilterField;
        
        private NameValue[] transactionDetailsField;
        
        private System.Nullable<bool> performDeliveryAndSignatureField;
        
        private System.Nullable<bool> requireDeliveryAndSignatureIfAvailableField;
        
        private System.Nullable<TokenTransactionMode> tokenTransactionModeField;
        
        private System.Nullable<bool> tokenOnlineFallbackToClassicField;
        
        private string tokenChallengeSummaryField;
        
        private System.Nullable<bool> tokenTransactionReturnQRCodeField;
        
        private System.Nullable<int> tokenTransactionQRCodeSizeField;
        
        private string tokenTransactionAppSchemeField;
        
        private string tokenDeliveryCallbackField;
        
        private string tokenMutualAuthenticationChallengeField;
        
        private System.Nullable<TokenProtectedOfflineOTPRestrictionType> tokenProtectedOfflineOTPRestrictionField;
        
        private string passwordNameField;
        
        private System.Nullable<bool> requireCertificateDeliveryField;
        
        private System.Nullable<bool> performCertificateDeliveryField;
        
        private string[] deliverySmartCredentialsField;
        
        private string smartCredentialDeliveryCallbackField;
        
        private string smartCredentialChallengeSummaryField;
        
        private System.Nullable<int> anonymousCertChallengeQRCodeSizeField;
        
        private string anonymousCertChallengeCallbackField;
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this attribute defines a list of authentication types 
    ///   that the application has already answered challenges for. If the 
    ///   requested authentication type for this request is on the list, another 
    ///   challenge will not be required. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] ChallengeHistory {
            get {
                return this.challengeHistoryField;
            }
            set {
                this.challengeHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   SecurityLevel
    /// </datatype>
    /// <value>
    ///   The security level (normal or enhanced) indicating which policies will 
    ///   be used for risk-based authentication. If not specified, it defaults 
    ///   to normal. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<SecurityLevel> SecurityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of challenge that the server should return. The type must be 
    ///   one of the types allowed by the policy at the server. If not 
    ///   specified, and the AuthenticationTypeList is not specified, the default 
    ///   challenge type specified in the policy is used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<AuthenticationType> AuthenticationType {
            get {
                return this.authenticationTypeField;
            }
            set {
                this.authenticationTypeField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If the AuthenticationType argument is not null, this argument is 
    ///   ignored. It specifies a list of authentication types. The type of 
    ///   challenge is returned by taking the intersection of this list with the list 
    ///   of authentication types allowed in the policy. Each type is checked in 
    ///   the order specified by the policy. The first type for which a 
    ///   challenge can be generated is used. 
    ///   If the empty list is specified, all allowed types are used.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthenticationTypeList {
            get {
                return this.authenticationTypeListField;
            }
            set {
                this.authenticationTypeListField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, this argument is the name of the application. This value 
    ///   will be included in any authentication audits so that the 
    ///   application performing the authentication can be tracked. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This argument is only used if the AuthenticationTypeList argument is 
    ///   not null. 
    ///   If this argument is true, only authentication types that require a PVN 
    ///   are considered. If this argument is false, only authentication types 
    ///   that don't require a PVN are considered. If this argument is not 
    ///   set, all listed authentication types are considered. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> RequiresPVN {
            get {
                return this.requiresPVNField;
            }
            set {
                this.requiresPVNField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   If specified, this argument specifies a list of authentication types 
    ///   that require a PVN for this operation. The values in this list are 
    ///   combined with the list of authentication types specified in the 
    ///   authTypesRequiringPVN policy for this user. Any authentication types 
    ///   specified in this value must be authentication types that support PVN. An 
    ///   application can use this argument to require a PVN for an authentication 
    ///   type where the PVN is not required by the policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] AuthTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for GRID challenges. If specified, it defines the 
    ///   number of cells to ask for a GRID challenge. The specified value must 
    ///   be within the range allowed by policy. 
    ///   If this value is specified, and the user does not use a GRID 
    ///   challenge, then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> GridChallengeSize {
            get {
                return this.gridChallengeSizeField;
            }
            set {
                this.gridChallengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The challenge size for QA challenges. If specified, it defines the 
    ///   number of questions to ask for a QA challenge. The specified value must 
    ///   be within the range allowed by policy. 
    ///   If this value is specified, and the user does not use a QA challenge, 
    ///   then it is ignored. 
    ///   If this value is not specified, it defaults to the challenge size 
    ///   defined in the policy. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> QAChallengeSize {
            get {
                return this.qAChallengeSizeField;
            }
            set {
                this.qAChallengeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationSecretParms
    /// </datatype>
    /// <value>
    ///   Controls the authentication secrets returned when getting a challenge. 
    ///   Any parameters set for updating or removing secrets are ignored if 
    ///   the request does not authenticate. If this value is not specified, the 
    ///   default is to return and update no authentication secrets. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationSecretParms authSecretParms {
            get {
                return this.authSecretParmsField;
            }
            set {
                this.authSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecretParms
    /// </datatype>
    /// <value>
    ///   Controls the shared secrets returned when getting a challenge. Any 
    ///   parameters set for updating or removing secrets are ignored if the 
    ///   request does not authenticate. If this value is not specified, the default 
    ///   is to return and update no shared secrets. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SharedSecretParms sharedSecretParms {
            get {
                return this.sharedSecretParmsField;
            }
            set {
                this.sharedSecretParmsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If set, this value contains the IP address that will be authenticated 
    ///   as part of this request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If false, the machine secret will not be updated or a new machine 
    ///   secret will not be registered if the request is successfully 
    ///   authenticated. If not specified, this attribute defaults to true. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> updateMachineSecret {
            get {
                return this.updateMachineSecretField;
            }
            set {
                this.updateMachineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the specified machine secret is not used for authentication 
    ///   but will be updated if the request authenticates. If true and a 
    ///   machine secret is not specified, a new machine secret will be registered if 
    ///   the request authenticates. If not specified, this attribute defaults 
    ///   to false. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> registerMachineSecret {
            get {
                return this.registerMachineSecretField;
            }
            set {
                this.registerMachineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   The machine secret that will be authenticated by this request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If set to true, a certificate was specified for risk-based 
    ///   authentication, the certificate was valid but not registered and the result of 
    ///   risk-based authentication was AUTHENTICATED, then the certificate will 
    ///   be registered against the user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> registerCertificate {
            get {
                return this.registerCertificateField;
            }
            set {
                this.registerCertificateField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The Base-64 encoded X.509 certificate that will be authenticated as 
    ///   part of risk-based authentication by this request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalRiskScoreParms
    /// </datatype>
    /// <value>
    ///   Parameters used to perform an external risk score check as part of 
    ///   risk-based authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalRiskScoreParms externalRiskScore {
            get {
                return this.externalRiskScoreField;
            }
            set {
                this.externalRiskScoreField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the user's default OTP OOB delivery mechanism will be used to 
    ///   delivery OTPs. 
    ///   <p>
    ///   If neither useDefaultDelivery nor contactInfoLabel are specified and 
    ///   an OTP challenge is returned, the OTPs will not be delivered and the 
    ///   challenge will include a list of available delivery mechanisms. The 
    ///   application can then delivery the OTPs itself (using the administration 
    ///   API to retrieve the OTPs) or it can request the challenge a second 
    ///   time specifying a specific delivery mechanism to use. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> useDefaultDelivery {
            get {
                return this.useDefaultDeliveryField;
            }
            set {
                this.useDefaultDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If set and useDefaultDelivery is not set to true, this value specifies 
    ///   one or more OTP OOB delivery mechanism that will be used to delivery 
    ///   OTPs. 
    ///   <p>
    ///   If neither useDefaultDelivery nor contactInfoLabel are specified and 
    ///   an OTP challenge is returned, the OTPs will not be delivered and the 
    ///   challenge will include a list of available delivery mechanisms. The 
    ///   application can then delivery the OTPs itself (using the administration 
    ///   API to retrieve the OTP) or it can request the challenge a second 
    ///   time specifying a specific delivery mechanism to use. 
    ///   </p>
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] contactInfoLabel {
            get {
                return this.contactInfoLabelField;
            }
            set {
                this.contactInfoLabelField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, the user's OTPs will be delivered when OTP dynamic refresh is 
    ///   enabled. Normally, when OTP dynamic refresh is enabled, the user's 
    ///   OTPs would be delivered as part of authentication. 
    ///   For OTPs to be delivered, the application must still specify the 
    ///   contacts to use for delivery via the useDefaultDelivery or 
    ///   contactInfoLabel parameters. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> deliverForDynamicRefresh {
            get {
                return this.deliverForDynamicRefreshField;
            }
            set {
                this.deliverForDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If true, Entrust IdentityGuard will only consider OTP authentication 
    ///   if OTP delivery is enabled for the user and the user has a usable 
    ///   delivery mechanism configured. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> onlySelectOTPAuthenticationIfDeliveryAvailable {
            get {
                return this.onlySelectOTPAuthenticationIfDeliveryAvailableField;
            }
            set {
                this.onlySelectOTPAuthenticationIfDeliveryAvailableField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, only a token with this serial number will be used when 
    ///   generating a token challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenSerialNumber {
            get {
                return this.tokenSerialNumberField;
            }
            set {
                this.tokenSerialNumberField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If specified, only a token with this vendor id will be used when 
    ///   generating a token challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenVendorId {
            get {
                return this.tokenVendorIdField;
            }
            set {
                this.tokenVendorIdField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If this argument is set, generation of a token challenge will only 
    ///   consider tokens whose set is set to one of the specified values. If this 
    ///   argument is not set, a token challenge will consider all of the 
    ///   user's tokens. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] tokenSets {
            get {
                return this.tokenSetsField;
            }
            set {
                this.tokenSetsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If the client sets this attribute to true, they will get QR Code 
    ///   encoded TOKENCR challenges for tokens that generate such challenges. If 
    ///   the client does not set this attribute or sets it to false, tokens that 
    ///   generate QR Code TOKENCR challenges will be ignored when generating 
    ///   challenges. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenSupportsQRCodeTokenCR {
            get {
                return this.tokenSupportsQRCodeTokenCRField;
            }
            set {
                this.tokenSupportsQRCodeTokenCRField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   When a QR code is generated for a TOKENCR challenge this argument 
    ///   specifies the size of the QR Code (in pixels) to be generated. 
    ///   The value must be between 1 and 1000. If not specified it defaults to 
    ///   the token vendor specific default. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> tokenChallengeQRCodeSize {
            get {
                return this.tokenChallengeQRCodeSizeField;
            }
            set {
                this.tokenChallengeQRCodeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricFilter
    /// </datatype>
    /// <value>
    ///   If this argument is set, generation of a biometric challenge will only 
    ///   consider user biometrics that match this filter. If this argument is 
    ///   not set, authentication of a biometric challenge will consider all 
    ///   of the user's biometrics. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricFilter biometricFilter {
            get {
                return this.biometricFilterField;
            }
            set {
                this.biometricFilterField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   Transaction details can be included in the challenge request. If 
    ///   provided, the same transaction details must be included in the 
    ///   authentication request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] transactionDetails {
            get {
                return this.transactionDetailsField;
            }
            set {
                this.transactionDetailsField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If a TOKENRO challenge is being requested and transaction details are 
    ///   specified, by default the transaction details will be delivered to 
    ///   any tokens that support delivery and signature. 
    ///   If this parameter is set to false, the transaction details will not be 
    ///   delivered. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> performDeliveryAndSignature {
            get {
                return this.performDeliveryAndSignatureField;
            }
            set {
                this.performDeliveryAndSignatureField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This parameter only applies when requesting a TOKENRO challenge when 
    ///   transaction details are specified. The intent of this parameter is to 
    ///   allow an application to limit the challenge to only tokens that 
    ///   support delivery and signature. If this parameter is set to true and a 
    ///   user has one or more active tokens that support delivery and signature, 
    ///   only those tokens will be used for the challenge. If this parameter 
    ///   is set to true and a user doesn't have any active tokens that support 
    ///   delivery and signature, then any active tokens will be used for the 
    ///   challenge. If this parameter is not set or is set to false, then any 
    ///   active tokens will be used for the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> requireDeliveryAndSignatureIfAvailable {
            get {
                return this.requireDeliveryAndSignatureIfAvailableField;
            }
            set {
                this.requireDeliveryAndSignatureIfAvailableField = value;
            }
        }
        
    /// <datatype>
    ///   TokenTransactionMode
    /// </datatype>
    /// <value>
    ///   The token transaction mode specifies the type of transaction that is 
    ///   performed when performDeliveryAndSignature is set to true. 
    ///   If not specified, this value defaults to CLASSIC.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenTransactionMode> tokenTransactionMode {
            get {
                return this.tokenTransactionModeField;
            }
            set {
                this.tokenTransactionModeField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If this attribute is set to true, when requesting an online 
    ///   transaction, it will be performed as a classic transaction if the user does not 
    ///   have any tokens that support online transactions. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenOnlineFallbackToClassic {
            get {
                return this.tokenOnlineFallbackToClassicField;
            }
            set {
                this.tokenOnlineFallbackToClassicField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When delivering a challenge to a token using an ONLINE transaction, 
    ///   the challenge summary if defined specifies text that will be displayed 
    ///   to the user in the mobile smart credential application. 
    ///   The application can use this attribute to describe to the user the 
    ///   purpose of the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenChallengeSummary {
            get {
                return this.tokenChallengeSummaryField;
            }
            set {
                this.tokenChallengeSummaryField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   When delivering a challenge to a token using a CLASSIC transaction, a 
    ///   QR Code will be returned in the challenge if this argument is set to 
    ///   true. This will allow the application to fallback to an OFFLINE 
    ///   transaction if the mobile application does not receive the classic 
    ///   transaction for some reason. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> tokenTransactionReturnQRCode {
            get {
                return this.tokenTransactionReturnQRCodeField;
            }
            set {
                this.tokenTransactionReturnQRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   When a QR code is generated for an OFFLINE transaction this argument 
    ///   specifies the size of the QR Code (in pixels) to be generated. 
    ///   The value must be between 1 and 1000. If not specified it defaults to 
    ///   250. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> tokenTransactionQRCodeSize {
            get {
                return this.tokenTransactionQRCodeSizeField;
            }
            set {
                this.tokenTransactionQRCodeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When a QR code is generated for an OFFLINE transaction this argument 
    ///   specifies the application specified URL scheme that is used for the 
    ///   URL encoded in the QR Code. If the value is not specified, the URL 
    ///   scheme used when the token was activated is used and if that value is not 
    ///   set a default value specific to the token vendor is used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenTransactionAppScheme {
            get {
                return this.tokenTransactionAppSchemeField;
            }
            set {
                this.tokenTransactionAppSchemeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The token delivery callback argument can optionally specify a URL. 
    ///   If a token challenge is delivered to tokens using an ONLINE 
    ///   transaction and the callback URL is specified, a message will be delivered to 
    ///   the URL when the response for the challenge is received by Entrust 
    ///   IdentityGuard. If the URL contains the token &lt;STATUS&gt; it will be 
    ///   replaced with the value CONFIRM, CONCERN or CANCEL indicating the 
    ///   status of the transaction. 
    ///   If the URL contains the token &lt;TRANSACTIONID&gt; it will be 
    ///   replaced with the transaction Id of the transaction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenDeliveryCallback {
            get {
                return this.tokenDeliveryCallbackField;
            }
            set {
                this.tokenDeliveryCallbackField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If a token is being used for mutual authentication this value 
    ///   specifies the mutual authentication challenge generated by the token. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string tokenMutualAuthenticationChallenge {
            get {
                return this.tokenMutualAuthenticationChallengeField;
            }
            set {
                this.tokenMutualAuthenticationChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   TokenProtectedOfflineOTPRestrictionType
    /// </datatype>
    /// <value>
    ///   If this attribute is provided, it restricts the selection of tokens to 
    ///   those which meet the criteria. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<TokenProtectedOfflineOTPRestrictionType> TokenProtectedOfflineOTPRestriction {
            get {
                return this.tokenProtectedOfflineOTPRestrictionField;
            }
            set {
                this.tokenProtectedOfflineOTPRestrictionField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the password to use when generating a password challenge. 
    ///   If not specified, the user's default password is used. If the named 
    ///   password does not exist, an error is returned. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string passwordName {
            get {
                return this.passwordNameField;
            }
            set {
                this.passwordNameField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If a CERTIFICATE challenge is being requested and 
    ///   requireCertificateDelivery is specified as true only smart credentials that support 
    ///   delivery will be considered for the challenge. 
    ///   If not specified, this argument defaults to false.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> requireCertificateDelivery {
            get {
                return this.requireCertificateDeliveryField;
            }
            set {
                this.requireCertificateDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   If a CERTIFICATE challenge is being requested and 
    ///   performCertificateDelivery is specified as true the certificate challenge (including 
    ///   transaction details if specified) will be delivered to smart credentials 
    ///   that support delivery. 
    ///   If not specified, this argument defaults to false.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> performCertificateDelivery {
            get {
                return this.performCertificateDeliveryField;
            }
            set {
                this.performCertificateDeliveryField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   If performCertificateDelivery is specified as true the application can 
    ///   restrict which smart credentials the challenge is delivered to by 
    ///   specifying their smart credential Ids in the deliverySmartCredentials 
    ///   argument. If nothing is specified, the challenge is delivered to all 
    ///   available smart credentials that support delivery. 
    ///   If a specified Id does not exist or does not support delivery an error 
    ///   will be returned. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] deliverySmartCredentials {
            get {
                return this.deliverySmartCredentialsField;
            }
            set {
                this.deliverySmartCredentialsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The smart credential delivery callback argument can optionally specify 
    ///   a URL. 
    ///   If a certificate challenge is delivered to smart credentials and the 
    ///   callback URL is specified, a message will be delivered to the URL when 
    ///   the response for the challenge is received by Entrust IdentityGuard. 
    ///   If the URL contains the token &lt;STATUS&gt; it will be replaced 
    ///   with the value CONFIRM, CONCERN or CANCEL indicating the status of the 
    ///   transaction. 
    ///   If the URL contains the token &lt;TRANSACTIONID&gt; it will be 
    ///   replaced with the transaction Id of the transaction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string smartCredentialDeliveryCallback {
            get {
                return this.smartCredentialDeliveryCallbackField;
            }
            set {
                this.smartCredentialDeliveryCallbackField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When delivering a challenge to a smart credential, the challenge 
    ///   summary if defined specifies text that will be displayed to the user in 
    ///   the mobile smart credential application. 
    ///   The application can use this attribute to describe to the user the 
    ///   purpose of the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string smartCredentialChallengeSummary {
            get {
                return this.smartCredentialChallengeSummaryField;
            }
            set {
                this.smartCredentialChallengeSummaryField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   When a QR code is generated for an anonymous security challenge this 
    ///   argument specifies the size of the QR Code (in pixels) to be 
    ///   generated. 
    ///   The value must be between 1 and 1000. If not specified it defaults to 
    ///   250. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> anonymousCertChallengeQRCodeSize {
            get {
                return this.anonymousCertChallengeQRCodeSizeField;
            }
            set {
                this.anonymousCertChallengeQRCodeSizeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   When an anonymous certificate challenge is created this argument can 
    ///   optionally specify a URL. 
    ///   When the response to the challenge is received by Entrust 
    ///   IdentityGuard and the challenge has been authenticated, a message will be 
    ///   delivered to the URL. If the URL contains the token &lt;USERID&gt; it will 
    ///   be replaced with the URL encoded user Id of the user who has 
    ///   authenticated the anonymous challenge. If the URL contains the token 
    ///   &lt;TRANSACTIONID&gt; it will be replaced with the transaction Id of the 
    ///   anonymous challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string anonymousCertChallengeCallback {
            get {
                return this.anonymousCertChallengeCallbackField;
            }
            set {
                this.anonymousCertChallengeCallbackField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getGenericChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetGenericChallengeCallParms {
        
        private string userIdField;
        
        private GenericChallengeParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to retrieve a challenge for.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   GenericChallengeParms
    /// </datatype>
    /// <value>
    ///   Parameters used to construct the challenge.
    ///   This can be used to specify the type of challenge and request that 
    ///   authentication secrets be returned. This parameter can be set to null, 
    ///   in which case the server will use the default authentication type for 
    ///   the user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericChallengeParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getAllowedAuthenticationTypesForGroup. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetAllowedAuthenticationTypesForGroupCallParms {
        
        private string groupField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the group to retrieve allowed authentication types for. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains a list of authentication types that are 
    ///   allowed for generic authentication and machine registration operations. It 
    ///   also lists authentication types that require a PVN and the PVN size. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AllowedAuthenticationTypes {
        
        private AuthenticationType[] genericAuthField;
        
        private AuthenticationType[] enhancedGenericAuthField;
        
        private AuthenticationType[] machineAuthField;
        
        private AuthenticationType[] authTypeCanViewSecretsField;
        
        private AuthenticationType[] authTypeCanModifySecretsField;
        
        private AuthenticationType[] authTypesRequiringPVNField;
        
        private int pVNLengthField;
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The authentication types allowed for generic authentication operations 
    ///   at the normal security level. An empty array means no authentication 
    ///   types are allowed. If an authentication type is not specified, the 
    ///   first authentication type in the array is the default. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] genericAuth {
            get {
                return this.genericAuthField;
            }
            set {
                this.genericAuthField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The authentication types allowed for generic authentication operations 
    ///   at the enhanced security level. An empty array means no 
    ///   authentication types are allowed. If an authentication type is not specified, the 
    ///   first authentication type in the array is the default. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] enhancedGenericAuth {
            get {
                return this.enhancedGenericAuthField;
            }
            set {
                this.enhancedGenericAuthField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The authentication types allowed for machine registration operations 
    ///   supported by the V1 and V2 APIs. An empty array means no 
    ///   authentication types are allowed. If an authentication type is not specified, the 
    ///   first authentication type in the array is the default. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] machineAuth {
            get {
                return this.machineAuthField;
            }
            set {
                this.machineAuthField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The type of authentications that can view secrets during 
    ///   authentication operations. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] authTypeCanViewSecrets {
            get {
                return this.authTypeCanViewSecretsField;
            }
            set {
                this.authTypeCanViewSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The type of authentications that can modify secrets during 
    ///   authentication operations. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] authTypeCanModifySecrets {
            get {
                return this.authTypeCanModifySecretsField;
            }
            set {
                this.authTypeCanModifySecretsField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   The type of authentications that require a PVN.
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] authTypesRequiringPVN {
            get {
                return this.authTypesRequiringPVNField;
            }
            set {
                this.authTypesRequiringPVNField = value;
            }
        }
        
    /// <datatype>
    ///   int
    /// </datatype>
    /// <value>
    ///   The size of a PVN.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int PVNLength {
            get {
                return this.pVNLengthField;
            }
            set {
                this.pVNLengthField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getAllowedAuthenticationTypes. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetAllowedAuthenticationTypesCallParms {
        
        private string userIdField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to retrieve allowed authentication types for.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   authenticateAnonymousCertChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticateAnonymousCertChallengeCallParms {
        
        private Response responseField;
        
        private GenericAuthenticateParms parmsField;
        
    /// <datatype>
    ///   Response
    /// </datatype>
    /// <value>
    ///   The response to the certificate challenge.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public Response response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   GenericAuthenticateParms
    /// </datatype>
    /// <value>
    ///   The parameters for the authentication request.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericAuthenticateParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getAnonymousCertChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetAnonymousCertChallengeCallParms {
        
        private string groupField;
        
        private string transactionIDField;
        
        private GenericChallengeParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group to retrieve an anonymous challenge for.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If requesting the authentication state of an challenge created 
    ///   previously, this is the transaction ID. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string transactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
        
    /// <datatype>
    ///   GenericChallengeParms
    /// </datatype>
    /// <value>
    ///   Parameters used to construct the anonymous challenge. This can be used 
    ///   to specify the QR code size. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericChallengeParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure defines the data returned after a successful generic 
    ///   challenge authentication. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericAuthenticateResponse {
        
        private CardData cardInfoField;
        
        private TokenData tokenInfoField;
        
        private PasswordInfo passwordInfoField;
        
        private CertificateData certificateInfoField;
        
        private SmartCredentialData smartCredentialInfoField;
        
        private BiometricData biometricInfoField;
        
        private NameValue[] authenticationSecretsField;
        
        private SharedSecret[] sharedSecretsField;
        
        private AuthenticationFault warningFaultField;
        
        private MachineSecret machineSecretField;
        
        private IPLocation iPLocationField;
        
        private CertificateData certificateRegisteredField;
        
        private AuthenticationType[] challengeHistoryField;
        
        private sbyte[] mSCHAPV2AuthenticatorResponseField;
        
        private TransactionReceiptInfo transactionReceiptInfoField;
        
        private DeliveryMechanism[] deliveryMechanismUsedField;
        
        private DeliveryMechanism[] deliveryMechanismFailedField;
        
        private AuthenticationFault[] deliveryMechanismFailureReasonField;
        
        private System.Nullable<bool> oTPDynamicRefreshField;
        
        private System.Nullable<bool> oTPNewGeneratedField;
        
        private string groupField;
        
        private string userNameField;
        
        private string fullNameField;
        
        private AuthenticationInfo lastAuthField;
        
        private AuthenticationInfo lastFailedAuthField;
        
        private NameValues[] retrievedRepositoryAttributesField;
        
        private string[] accessGroupsField;
        
    /// <datatype>
    ///   CardData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the card used during 
    ///   authentication. It will be null if a card was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CardData cardInfo {
            get {
                return this.cardInfoField;
            }
            set {
                this.cardInfoField = value;
            }
        }
        
    /// <datatype>
    ///   TokenData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the token used during 
    ///   authentication. It will be null if a token was not used for authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenData tokenInfo {
            get {
                return this.tokenInfoField;
            }
            set {
                this.tokenInfoField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordInfo
    /// </datatype>
    /// <value>
    ///   This structure contains information about the password used during 
    ///   authentication. It will be null if a password was not used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordInfo PasswordInfo {
            get {
                return this.passwordInfoField;
            }
            set {
                this.passwordInfoField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the certificate used to 
    ///   validate the response. It will be null if certificate authentication was 
    ///   not used for authentication or a smart credential was used to 
    ///   authenticate the response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData certificateInfo {
            get {
                return this.certificateInfoField;
            }
            set {
                this.certificateInfoField = value;
            }
        }
        
    /// <datatype>
    ///   SmartCredentialData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the smart credential used to 
    ///   validate the response. 
    ///   It will be null if certificate authentication was not used for 
    ///   authentication or an unmanaged certificate was used to authenticate the 
    ///   response. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public SmartCredentialData smartCredentialInfo {
            get {
                return this.smartCredentialInfoField;
            }
            set {
                this.smartCredentialInfoField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricData
    /// </datatype>
    /// <value>
    ///   This structure contains information about the biometric used to 
    ///   validate the response. 
    ///   It will be null if biometric authentication was not used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricData biometricInfo {
            get {
                return this.biometricInfoField;
            }
            set {
                this.biometricInfoField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   A list of authentication secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included 
    ///   authentication secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] AuthenticationSecrets {
            get {
                return this.authenticationSecretsField;
            }
            set {
                this.authenticationSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   An array of Shared Secrets retrieved after a successful 
    ///   authentication. This will be non-null if the authentication call included shared 
    ///   secret parameters requesting secrets. 
    ///   Otherwise, it will be null
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SharedSecrets {
            get {
                return this.sharedSecretsField;
            }
            set {
                this.sharedSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   A fault indicating that an error occurred updating authentication or 
    ///   shared secrets but the response was successfully authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault WarningFault {
            get {
                return this.warningFaultField;
            }
            set {
                this.warningFaultField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   If the request included a machine secret or a request to register a 
    ///   new machine secret, this attribute will include the new or updated 
    ///   machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   IPLocation
    /// </datatype>
    /// <value>
    ///   If the request included an IP address to be registered, this attribute 
    ///   will include the location of that IP address. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPLocation IPLocation {
            get {
                return this.iPLocationField;
            }
            set {
                this.iPLocationField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   If a new certificate was registered during this request, this value 
    ///   will include information about that certificate. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData certificateRegistered {
            get {
                return this.certificateRegisteredField;
            }
            set {
                this.certificateRegisteredField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType[]
    /// </datatype>
    /// <value>
    ///   A list of authentication types whose challenges have been 
    ///   authenticated. The value returned in this attribute will consist of the list 
    ///   passed to this request plus the authentication type authenticated in this 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationType[] ChallengeHistory {
            get {
                return this.challengeHistoryField;
            }
            set {
                this.challengeHistoryField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   If MS-CHAPv2 authentication was used, this value will include the 
    ///   MS-CHAPV2 authenticator response value. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] MSCHAPV2AuthenticatorResponse {
            get {
                return this.mSCHAPV2AuthenticatorResponseField;
            }
            set {
                this.mSCHAPV2AuthenticatorResponseField = value;
            }
        }
        
    /// <datatype>
    ///   TransactionReceiptInfo
    /// </datatype>
    /// <value>
    ///   If this value is specified, it will contain the transaction receipt 
    ///   and information describing how it was signed. This value will only be 
    ///   specified if transaction details were included in the authentication 
    ///   request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TransactionReceiptInfo transactionReceiptInfo {
            get {
                return this.transactionReceiptInfoField;
            }
            set {
                this.transactionReceiptInfoField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs were successfully delivered during the authentication, this 
    ///   attribute will specify the delivery mechanisms that were used to 
    ///   successfully deliver the OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismUsed {
            get {
                return this.deliveryMechanismUsedField;
            }
            set {
                this.deliveryMechanismUsedField = value;
            }
        }
        
    /// <datatype>
    ///   DeliveryMechanism[]
    /// </datatype>
    /// <value>
    ///   If OTPs failed delivery during the authentication, this attribute will 
    ///   specify the delivery mechanisms that failed delivery. The 
    ///   deliveryMechanismFailureReason attribute will have a corresponding entry 
    ///   describing why delivery failed. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DeliveryMechanism[] deliveryMechanismFailed {
            get {
                return this.deliveryMechanismFailedField;
            }
            set {
                this.deliveryMechanismFailedField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault[]
    /// </datatype>
    /// <value>
    ///   If set, this value specifies the reason why each corresponding 
    ///   delivery mechanism specified in the deliveryMechanismFailed attribute failed 
    ///   to deliver OTPs. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public AuthenticationFault[] deliveryMechanismFailureReason {
            get {
                return this.deliveryMechanismFailureReasonField;
            }
            set {
                this.deliveryMechanismFailureReasonField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication performed.
    ///   This flag will indicate if OTP dynamic refresh was enabled or not. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPDynamicRefresh {
            get {
                return this.oTPDynamicRefreshField;
            }
            set {
                this.oTPDynamicRefreshField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   Will be set if OTP authentication was performed and OTP dynamic 
    ///   refresh is enabled. This flag will indicate if new OTPs were generated as 
    ///   part of this authentication. If OTPs were generated and not delivered 
    ///   (as indicated by the deliveryMechanismUsed attribute) then the 
    ///   application may be required to deliver the OTPs directly using the 
    ///   administration API to retrieve the OTP values. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> OTPNewGenerated {
            get {
                return this.oTPNewGeneratedField;
            }
            set {
                this.oTPNewGeneratedField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The full name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationInfo
    /// </datatype>
    /// <value>
    ///   Information about the last successful authentication for this user 
    ///   prior to this one. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationInfo lastAuth {
            get {
                return this.lastAuthField;
            }
            set {
                this.lastAuthField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationInfo
    /// </datatype>
    /// <value>
    ///   Information about the last failed authentication for this user. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationInfo lastFailedAuth {
            get {
                return this.lastFailedAuthField;
            }
            set {
                this.lastFailedAuthField = value;
            }
        }
        
    /// <datatype>
    ///   NameValues[]
    /// </datatype>
    /// <value>
    ///   A list of attribute values that were searched for based on the 
    ///   attribute names provided within the retrieveRepositoryAttributes member of 
    ///   the GenericAuthenticateParms object. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValues[] retrievedRepositoryAttributes {
            get {
                return this.retrievedRepositoryAttributesField;
            }
            set {
                this.retrievedRepositoryAttributesField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   The access groups associated with this user.
    ///   The access groups may be based on policy or may be specific to the 
    ///   user based on the user access group override policy. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] AccessGroups {
            get {
                return this.accessGroupsField;
            }
            set {
                this.accessGroupsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   authenticateAnonymousChallenge. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class AuthenticateAnonymousChallengeCallParms {
        
        private string userIdField;
        
        private ChallengeSet challengeSetField;
        
        private Response responseField;
        
        private GenericAuthenticateParms parmsField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The user to authenticate.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
    /// <datatype>
    ///   ChallengeSet
    /// </datatype>
    /// <value>
    ///   The ChallengeSet that was issued by the getAnonymousChallenge or 
    ///   getAnonymousChallengeForGroup operation. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ChallengeSet challengeSet {
            get {
                return this.challengeSetField;
            }
            set {
                this.challengeSetField = value;
            }
        }
        
    /// <datatype>
    ///   Response
    /// </datatype>
    /// <value>
    ///   The array of strings containing the user responses to each Challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Response response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
    /// <datatype>
    ///   GenericAuthenticateParms
    /// </datatype>
    /// <value>
    ///   The parameters for the authentication request.
    ///   The only value from this structure that is used is the new PVN if 
    ///   specified. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public GenericAuthenticateParms parms {
            get {
                return this.parmsField;
            }
            set {
                this.parmsField = value;
            }
        }
    }
    
    /// <summary>
    ///   This structure contains the parameters passed in a call to 
    ///   getAnonymousChallengeForGroup. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GetAnonymousChallengeForGroupCallParms {
        
        private string groupField;
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group to retrieve a challenge for.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
    }
    
    /// <summary>
    ///   A generic challenge. This can contain a challenge for any of the types 
    ///   defined by AuthenticationType. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:entrust.com:ig:authenticationV11:wsdl")]
    public partial class GenericChallenge {
        
        private ChallengeRequestResult challengeRequestResultField;
        
        private RiskScoringResult riskScoringResultField;
        
        private System.Nullable<AuthenticationType> typeField;
        
        private PVNInfo pVNInfoField;
        
        private ChallengeSet gridChallengeField;
        
        private string[] qAChallengeField;
        
        private TokenChallenge tokenChallengeField;
        
        private OTPChallenge oTPChallengeField;
        
        private PasswordChallenge passwordChallengeField;
        
        private CertificateChallenge certificateChallengeField;
        
        private ExternalChallenge externalChallengeField;
        
        private BiometricChallenge biometricChallengeField;
        
        private MachineSecret machineSecretField;
        
        private MachineSecretPolicy machineSecretPolicyField;
        
        private IPLocation iPLocationField;
        
        private CertificateData certificateField;
        
        private NameValue[] authenticationSecretsField;
        
        private SharedSecret[] sharedSecretsField;
        
        private string transactionIdField;
        
        private sbyte[] qRCodeField;
        
        private string anonymousChallengeURLField;
        
        private AuthenticationFault warningFaultField;
        
        private string usernameField;
        
        private string groupField;
        
        private System.Nullable<bool> disableChallengeRetentionField;
        
    /// <datatype>
    ///   ChallengeRequestResult
    /// </datatype>
    /// <value>
    ///   This value will indicate if the challenge request resulted in 
    ///   AUTHENTICATED (no challenge response is required), CHALLENGE (a challenge 
    ///   response is required) or REJECT (the user was not authenticated). 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ChallengeRequestResult challengeRequestResult {
            get {
                return this.challengeRequestResultField;
            }
            set {
                this.challengeRequestResultField = value;
            }
        }
        
    /// <datatype>
    ///   RiskScoringResult
    /// </datatype>
    /// <value>
    ///   If risk based authentication was performed, this value will be set and 
    ///   will indicate which parts of authentication passed or failed and why 
    ///   they failed. 
    ///   Risk based authentication is performed if either and IP address or 
    ///   machine secret is included with the challenge request. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public RiskScoringResult riskScoringResult {
            get {
                return this.riskScoringResultField;
            }
            set {
                this.riskScoringResultField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationType
    /// </datatype>
    /// <value>
    ///   The type of authentication that is required to answer the challenge. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<AuthenticationType> type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
    /// <datatype>
    ///   PVNInfo
    /// </datatype>
    /// <value>
    ///   Information about the personal verification number (PVN) for this 
    ///   challenge indicating if the PVN is required and/or available. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PVNInfo PVNInfo {
            get {
                return this.pVNInfoField;
            }
            set {
                this.pVNInfoField = value;
            }
        }
        
    /// <datatype>
    ///   ChallengeSet
    /// </datatype>
    /// <value>
    ///   A Grid challenge. This will be non-null if, and only if, the 
    ///   authentication type is GRID. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ChallengeSet GridChallenge {
            get {
                return this.gridChallengeField;
            }
            set {
                this.gridChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   string[]
    /// </datatype>
    /// <value>
    ///   A Question and Answer challenge. This will be non-null if, and only 
    ///   if, the authentication type is QA. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] QAChallenge {
            get {
                return this.qAChallengeField;
            }
            set {
                this.qAChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   TokenChallenge
    /// </datatype>
    /// <value>
    ///   A token challenge. This will be non-null if, and only if, the 
    ///   authentication type is TOKENRO or TOKENCR. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TokenChallenge TokenChallenge {
            get {
                return this.tokenChallengeField;
            }
            set {
                this.tokenChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   OTPChallenge
    /// </datatype>
    /// <value>
    ///   An OTP challenge. This will be non-null if, and only if, the 
    ///   authentication type is OTP. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public OTPChallenge OTPChallenge {
            get {
                return this.oTPChallengeField;
            }
            set {
                this.oTPChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   PasswordChallenge
    /// </datatype>
    /// <value>
    ///   A password challenge. This will be non-null if, and only if, the 
    ///   authentication type is PASSWORD. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public PasswordChallenge PasswordChallenge {
            get {
                return this.passwordChallengeField;
            }
            set {
                this.passwordChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateChallenge
    /// </datatype>
    /// <value>
    ///   A certificate challenge. This will be non-null if, and only if, the 
    ///   authentication type is CERTIFICATE. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateChallenge CertificateChallenge {
            get {
                return this.certificateChallengeField;
            }
            set {
                this.certificateChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   ExternalChallenge
    /// </datatype>
    /// <value>
    ///   A challenge for an external authentication service.
    ///   This will be non-null if, and only if, the authentication type is 
    ///   EXTERNAL. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public ExternalChallenge ExternalChallenge {
            get {
                return this.externalChallengeField;
            }
            set {
                this.externalChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   BiometricChallenge
    /// </datatype>
    /// <value>
    ///   A biometric challenge. This will be non-null if, and only if, the 
    ///   authentication type is BIOMETRIC. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public BiometricChallenge BiometricChallenge {
            get {
                return this.biometricChallengeField;
            }
            set {
                this.biometricChallengeField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecret
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included a machine secret, this 
    ///   attribute will contain the updated machine secret. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecret machineSecret {
            get {
                return this.machineSecretField;
            }
            set {
                this.machineSecretField = value;
            }
        }
        
    /// <datatype>
    ///   MachineSecretPolicy
    /// </datatype>
    /// <value>
    ///   This structure will contain policy describing what parameters are 
    ///   required in a machine secret. The application can use this information to 
    ///   determine what fields it must include in a machine secret that it 
    ///   wants to register. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public MachineSecretPolicy machineSecretPolicy {
            get {
                return this.machineSecretPolicyField;
            }
            set {
                this.machineSecretPolicyField = value;
            }
        }
        
    /// <datatype>
    ///   IPLocation
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included an IP address, this 
    ///   attribute will include the location of the IP address. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public IPLocation IPLocation {
            get {
                return this.iPLocationField;
            }
            set {
                this.iPLocationField = value;
            }
        }
        
    /// <datatype>
    ///   CertificateData
    /// </datatype>
    /// <value>
    ///   If the request was authenticated and included a certificate, this 
    ///   attribute will include information about the certificate used for 
    ///   authentication. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public CertificateData Certificate {
            get {
                return this.certificateField;
            }
            set {
                this.certificateField = value;
            }
        }
        
    /// <datatype>
    ///   NameValue[]
    /// </datatype>
    /// <value>
    ///   The user's authentication secrets. The secrets included are determined 
    ///   by the AuthenticationSecretParms passed when the challenge was 
    ///   requested. By default, no authentication secrets are included, but this 
    ///   can be changed by setting the challenge parameters used when getting 
    ///   the challenge. If the user has no secrets, or the requested secrets are 
    ///   not found, this element will be null. The system policy may also 
    ///   prevent a user's authentication secrets from being returned unless the 
    ///   request is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public NameValue[] AuthenticationSecrets {
            get {
                return this.authenticationSecretsField;
            }
            set {
                this.authenticationSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   SharedSecret[]
    /// </datatype>
    /// <value>
    ///   The user's shared secrets. The secrets included are determined by the 
    ///   SharedSecretParms passed when the challenge was requested. By 
    ///   default, no shared secrets are included. If the user has no secrets or the 
    ///   requested secrets are not found, this element will be null. The system 
    ///   policy may also prevent secrets from being returned unless the 
    ///   request is authenticated. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SharedSecret[] SharedSecrets {
            get {
                return this.sharedSecretsField;
            }
            set {
                this.sharedSecretsField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If transaction authentication is being performed as part of this 
    ///   authentication, this value will return the transaction identifier of the 
    ///   transaction. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
    /// <datatype>
    ///   byte[]
    /// </datatype>
    /// <value>
    ///   If an anonymous security challenge was requested this value returns 
    ///   the challenge as a QR code. 
    /// </value>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public sbyte[] QRCode {
            get {
                return this.qRCodeField;
            }
            set {
                this.qRCodeField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   If an anonymous security challenge was requested this value returns 
    ///   the challenge as a URL. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string AnonymousChallengeURL {
            get {
                return this.anonymousChallengeURLField;
            }
            set {
                this.anonymousChallengeURLField = value;
            }
        }
        
    /// <datatype>
    ///   AuthenticationFault
    /// </datatype>
    /// <value>
    ///   A fault indicating that an error occurred after an authentication 
    ///   success. This could occur if there was an error updating the user's 
    ///   authentication or shared secrets. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public AuthenticationFault WarningFault {
            get {
                return this.warningFaultField;
            }
            set {
                this.warningFaultField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The name of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
    /// <datatype>
    ///   string
    /// </datatype>
    /// <value>
    ///   The group of the user performing the operation.
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
    /// <datatype>
    ///   boolean
    /// </datatype>
    /// <value>
    ///   This value specifies whether challenge retention is disabled; 
    ///   depending on the authentication type used. 
    /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<bool> disableChallengeRetention {
            get {
                return this.disableChallengeRetentionField;
            }
            set {
                this.disableChallengeRetentionField = value;
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void pingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getAnonymousChallengeCompletedEventHandler(object sender, getAnonymousChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAnonymousChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAnonymousChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericChallenge Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericChallenge)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getAnonymousChallengeForGroupCompletedEventHandler(object sender, getAnonymousChallengeForGroupCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAnonymousChallengeForGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAnonymousChallengeForGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericChallenge Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericChallenge)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void authenticateAnonymousChallengeCompletedEventHandler(object sender, authenticateAnonymousChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateAnonymousChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateAnonymousChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericAuthenticateResponse)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getAnonymousCertChallengeCompletedEventHandler(object sender, getAnonymousCertChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAnonymousCertChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAnonymousCertChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericChallenge Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericChallenge)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void authenticateAnonymousCertChallengeCompletedEventHandler(object sender, authenticateAnonymousCertChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateAnonymousCertChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateAnonymousCertChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericAuthenticateResponse)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getAllowedAuthenticationTypesCompletedEventHandler(object sender, getAllowedAuthenticationTypesCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllowedAuthenticationTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllowedAuthenticationTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public AllowedAuthenticationTypes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AllowedAuthenticationTypes)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getAllowedAuthenticationTypesForGroupCompletedEventHandler(object sender, getAllowedAuthenticationTypesForGroupCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllowedAuthenticationTypesForGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllowedAuthenticationTypesForGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public AllowedAuthenticationTypes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AllowedAuthenticationTypes)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getGenericChallengeCompletedEventHandler(object sender, getGenericChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGenericChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGenericChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericChallenge Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericChallenge)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getGenericChallengeExCompletedEventHandler(object sender, getGenericChallengeExCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGenericChallengeExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGenericChallengeExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericChallengeEx Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericChallengeEx)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void authenticateGenericChallengeCompletedEventHandler(object sender, authenticateGenericChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateGenericChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateGenericChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericAuthenticateResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericAuthenticateResponse)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void authenticateGenericChallengeExCompletedEventHandler(object sender, authenticateGenericChallengeExCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateGenericChallengeExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateGenericChallengeExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public GenericAuthenticateExResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GenericAuthenticateExResponse)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getCombinedChallengeCompletedEventHandler(object sender, getCombinedChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCombinedChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCombinedChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public CombinedChallenge Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedChallenge)(this.results[0]));
            }
        }
    }
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void authenticateCombinedChallengeCompletedEventHandler(object sender, authenticateCombinedChallengeCompletedEventArgs e);
    
    ///  <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateCombinedChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateCombinedChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
    ///  <remarks/>
        public CombinedAuthenticateResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedAuthenticateResponse)(this.results[0]));
            }
        }
    }


   /// <summary> 
   /// A utility class that given an array of TokenData objects will return a
   /// list of all the sets used by those tokens and will return a list of
   /// tokens corresponding to a given set.
   /// </summary> 
   public class TokenSetParser
   {
      /// <summary>
      /// Initialize the class with an array of tokens.
      /// </summary>
      /// <param name="tokens">The array of tokens to be parsed.</param>
      public TokenSetParser(TokenData[] tokens)
      {
         sets = new ArrayList();
         setMap = new Hashtable();

         if (tokens != null)
         {
            for (int i=0; i<tokens.Length; i++)
            {
               string name = tokens[i].TokenSet.ToLower();
               ArrayList list = null;
               if (setMap.Contains(name))
               {
                  list = (ArrayList) setMap[name];
               }
               else
               {
                  list = new ArrayList();
                  setMap.Add(name, list);
                  sets.Add(tokens[i].TokenSet);
               }
               list.Add(tokens[i]);
            }
         }
      }

      /// <summary>
      /// Return a list of all the sets found in the initial list of tokens.
      /// </summary>
      public ArrayList getTokenSets()
      {
         return sets;
      }

      /// <summary>
      /// Return a list of all the tokens with the given set.  If no tokens
      /// exist for the given set, return null.
      /// </summary>
      /// <param name="set">The set whose tokens are to be returned.</param>
      public ArrayList getTokensForSet(string set)
      {
         set = set.ToLower();
         if (setMap.Contains(set))
         {
            return (ArrayList) setMap[set];
         }

         return null;
      }

      private ArrayList sets = null;
      private Hashtable setMap = null;
   }
}
